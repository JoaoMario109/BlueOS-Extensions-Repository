[
    {
        "identifier": "williangalvani.webrtc",
        "name": "WebRTC Experiments",
        "description": "Janus Gateway experiments",
        "docker": "williangalvani/companion-webrtc",
        "website": "https://github.com/Williangalvani/blueos-webrtc",
        "versions": {
            "v1.0.0": {
                "permissions": {
                    "NetworkMode": "host"
                },
                "requirements": "core >= 1",
                "tag": "v1.0.0",
                "website": "https://github.com/Williangalvani/blueos-webrtc",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "This exposes an webrtc stream for your browser.\n\nYou need to send an UDP h264 stream to localhost:8004",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/blueos-webrtc/issues"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "williangalvani.usbip",
        "name": "USBIP",
        "description": "USBIP extension for extending USB over IP",
        "docker": "williangalvani/blueos-extension-usbip",
        "website": "https://github.com/Williangalvani/blueos-usbip",
        "versions": {
            "v1.0.0": {
                "permissions": {
                    "NetworkMode": "host"
                },
                "requirements": "core >  1",
                "tag": "v1.0.0",
                "website": "https://github.com/Williangalvani/BlueOS-UsbIp",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# USB/IP extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\n# Client\n\n## Linux:\n\n\n```\n# load modules\nsudo modprobe usbip-core\nsudo modprobe vhci-hcd\n# list devices\nsudo usbip list --remote blueos.local\n# connect to device with bus 1-1.3\nsudo usbip attach --remote blueos.local --busid 1-1.3\n\n```\n\n## Windows\n\nDownload the 3.6 dev release from https://github.com/cezanne/usbip-win and follow the \"Client\" instructions there.\nThe new \"ude\" driver seemed to work for me.",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/BlueOS-UsbIp"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "williangalvani.virtualhere",
        "name": "VirtualHere",
        "description": "VirtualHere extension for exposing USB devices over IP",
        "docker": "williangalvani/blueos-extension-virtualhere",
        "website": "https://github.com/Williangalvani/BlueOS-VirtualHere",
        "versions": {
            "v1.0.2": {
                "permissions": {
                    "NetworkMode": "host",
                    "HostConfig": {
                        "Privileged": true,
                        "NetworkMode": "host"
                    }
                },
                "requirements": "core >= 1",
                "tag": "v1.0.2",
                "website": "https://github.com/Williangalvani/BlueOS-VirtualHere",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS VirtualHere extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\n# Client\n\nDownload a client from https://www.virtualhere.com/usb_client_software\n",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/BlueOS-VirtualHere/issues"
            },
            "v1.0.0": {
                "permissions": {
                    "NetworkMode": "host",
                    "HostConfig": {
                        "Privileged": true
                    }
                },
                "requirements": "core >= 1",
                "tag": "v1.0.0",
                "website": "https://github.com/Williangalvani/BlueOS-VirtualHere",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS VirtualHere extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\nTo use, first install it in BlueOS:\n\n\n```\nred-pill\nsudo docker run -d --net=host --privileged --name=blueos-virtualhere --restart=unless-stopped williangalvani/blueos-extension-virtualhere:latest\n```\n\n# Client\n\nDownload a client from https://www.virtualhere.com/usb_client_software",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/BlueOS-VirtualHere/issues"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/virtualhere/extension_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "williangalvani.example4",
        "name": "Example 4",
        "description": "Vuetify + Persistent backend",
        "docker": "williangalvani/blueos-example4",
        "website": "https://github.com/Williangalvani/BlueOS-examples/",
        "versions": {
            "v1.0.0": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": "core >= 1",
                "tag": "v1.0.0",
                "website": "https://github.com/Williangalvani/BlueOS-examples/",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# Static Webpage extension\n\nThis uses python to serve a static HTML page using Vue and Vuetify as an extension. The static page in this example talks to a simple python backend.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "williangalvani.example2",
        "name": "Example 2",
        "description": "Static HTML plus MAVLink data",
        "docker": "williangalvani/blueos-example2",
        "website": "https://github.com/Williangalvani/BlueOS-examples/",
        "versions": {
            "v1.0.0": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": "core >= 1",
                "tag": "v1.0.0",
                "website": "https://github.com/Williangalvani/BlueOS-examples/",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# Static Webpage extension\n\nThis uses python to serve a basic static HTML page as an extension. This example includes MAVLink2Rest communication via http\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "williangalvani.example3",
        "name": "Example 3",
        "description": "Basic Vuetify example",
        "docker": "williangalvani/blueos-example3",
        "website": "https://github.com/Williangalvani/BlueOS-examples/",
        "versions": {
            "v1.0.0": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": "core >= 1",
                "tag": "v1.0.0",
                "website": "https://github.com/Williangalvani/BlueOS-examples/",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# Static Webpage extension\n\nThis uses python to serve a static HTML page using Vue and Vuetify as an extension.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "williangalvani.example1",
        "name": "Example 1",
        "description": "Hello World",
        "docker": "williangalvani/blueos-example1",
        "website": "https://github.com/Williangalvani/BlueOS-examples/",
        "versions": {
            "v1.0.0": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": "core >  1",
                "tag": "v1.0.0",
                "website": "https://github.com/Williangalvani/BlueOS-examples/",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# Static Webpage extension\n\nThis uses python to serve a basic static HTML page as an extension.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "williangalvani.zerotier",
        "name": "ZeroTier",
        "description": "ZeroTier integration",
        "docker": "williangalvani/zerotier",
        "website": "https://github.com/Williangalvani/ZeroTierOne",
        "versions": {
            "v1.0.0": {
                "permissions": {
                    "NetworkMode": "host",
                    "HostConfig": {
                        "Privileged": true,
                        "NetworkMode": "host",
                        "CapAdd": [
                            "SYS_ADMIN",
                            "NET_ADMIN"
                        ],
                        "Binds": [
                            "/var/lib/zerotier-one:/var/lib/zerotier-one"
                        ],
                        "Devices": [
                            {
                                "PathOnHost": "/dev/net/tun",
                                "PathInContainer": "/dev/net/tun",
                                "CgroupPermissions": "rwm"
                            }
                        ]
                    }
                },
                "requirements": "core >= 1",
                "tag": "v1.0.0",
                "website": "https://github.com/williangalvani/zerotierone",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "This is a ZeroTier extension. It sets up a VPN to access your device from anywhere with an internet connection.\nFor more information on ZeroTier, check [ZeroTier](https://www.zerotier.com/).",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/williangalvani/zerotierone"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/zerotier/extension_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "williangalvani.example5",
        "name": "Example 5",
        "description": "GPIO PWM Control",
        "docker": "williangalvani/blueos-example5",
        "website": "https://github.com/Williangalvani/BlueOS-examples/",
        "versions": {
            "v1.0.0": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Privileged": true,
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": "core >= 1",
                "tag": "v1.0.0",
                "website": "https://github.com/Williangalvani/BlueOS-examples/",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# Gpio Control Example\n\nThis uses python to serve a static HTML page using Vue and Vuetify controlling a gpio using a python backend\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`\n\nThen pull it in blueos:\n\n\n```\nred-pill\nsudo docker run -d --net=host --name=blueos-example4 --restart=unless-stopped YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest\n```",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/williangalvani/company_logo.png"
    },
    {
        "identifier": "nortekgroup.nucleus",
        "name": "Nortek Nucleus",
        "description": "Driver that extract velocity data from a Nortek Nucleus device and feeds it to ArduSub, allowing it to utilize its Position Hold feature",
        "docker": "nortekgroup/blueos_nucleus",
        "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension",
        "versions": {
            "0.0.6": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": null,
                "tag": "0.0.6",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension",
                "authors": [
                    {
                        "name": "Martin Bergene Johansen",
                        "email": "martin.johansen@nortekgroup.com"
                    }
                ],
                "docs": null,
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV. \n\nIt works by wrapping up the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the Ardusub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## setup\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201.\n\n\n### Ardusub\n\nArdusub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n\n## Adding extension to BlueROV2\n\n### BlueOS\n\nThe extension should be added through BlueOS' extensions menu.\n\n### Docker\n\nIt is also possible to add the extension manually on the onboard computer without going through BlueOS.\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\nClone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe web interface of the extension is by default on port 5000. The web interface can be accessed in a browser by navigating to `192.168.2.2:5000` (or `blueos.local:5000`) when the docker container is running.\n\nIf another port is preferred for the web interface the image can be build with the preffered port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the web interface available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuraiton data inbetween runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (UI) can be found by navigating to [blueos.local/nucleus](blueos.local/nucleus).\n\nThe UI presents the user with a home page and two pages for paramterization. These pages can be navigated inbetween using the navigation banner at the top of the UI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessarry for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP adress should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still runnning and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the bahavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the origial values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportuniy to modify selected PID parameters in the controller. Good parametirzation is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behaviour of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the origial values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "company": {
                    "name": "Nortek",
                    "about": "",
                    "email": ""
                },
                "support": "https://support.nortekgroup.com/"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/nortekgroup/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/nortekgroup/company_logo.png"
    },
    {
        "identifier": "ceruleansonar.cerulean-dvl",
        "name": "Cerulean DVL",
        "description": "BlueOS extension for Cerulean DVL",
        "docker": "nicknothom/blueos-cerulean-dvl",
        "website": "https://github.com/ceruleansonar/BlueOS-Cerulean-DVL/",
        "versions": {
            "v1.0.5": {
                "permissions": {
                    "NetworkMode": "host",
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/blueos:/root/.config"
                        ]
                    }
                },
                "requirements": null,
                "tag": "v1.0.5",
                "website": "https://ceruleansonar.com",
                "authors": [
                    {
                        "name": "Nick Nothom",
                        "email": "nick.nothom@ceruleansonar.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/blueos:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "company": {
                    "name": "Cerulean Sonar",
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com"
                },
                "support": "https://forum.ceruleansonar.com/categories"
            },
            "v1.0.4": {
                "permissions": {
                    "NetworkMode": "host"
                },
                "requirements": null,
                "tag": "v1.0.4",
                "website": "https://ceruleansonar.com",
                "authors": [
                    {
                        "name": "Nick Nothom",
                        "email": "nick.nothom@ceruleansonar.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/blueos:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "company": {
                    "name": "Cerulean Sonar",
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com"
                },
                "support": "https://forum.ceruleansonar.com/categories"
            },
            "v1.0.2": {
                "permissions": {
                    "NetworkMode": "host"
                },
                "requirements": null,
                "tag": "v1.0.2",
                "website": "https://ceruleansonar.com",
                "authors": [
                    {
                        "name": "Nick Nothom",
                        "email": "nick.nothom@ceruleansonar.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/blueos:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "company": {
                    "name": "Cerulean Sonar",
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com"
                },
                "support": "https://forum.ceruleansonar.com/categories"
            },
            "v1.0.1": {
                "permissions": {
                    "NetworkMode": "host"
                },
                "requirements": null,
                "tag": "v1.0.1",
                "website": "https://ceruleansonar.com",
                "authors": [
                    {
                        "name": "Nick Nothom",
                        "email": "nick.nothom@ceruleansonar.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/blueos:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "company": {
                    "name": "Cerulean Sonar",
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com"
                },
                "support": "https://forum.ceruleansonar.com/categories"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/ceruleansonar/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/ceruleansonar/company_logo.png"
    },
    {
        "identifier": "ceruleansonar.cerulean-docs",
        "name": "Cerulean Docs",
        "description": "Offline access for Cerulean Documentation",
        "docker": "nicknothom/blueos-cerulean-docs",
        "website": "https://github.com/ceruleansonar/BlueOS-Cerulean-Docs/",
        "versions": {
            "v1.1.0": {
                "permissions": {
                    "NetworkMode": "host"
                },
                "requirements": "core >  1",
                "tag": "v1.1.0",
                "website": "https://ceruleansonar.com",
                "authors": [
                    {
                        "name": "Nick Nothom",
                        "email": "nick.nothom@ceruleansonar.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS Cerulean Docs\n\nHosts a mirror of the [Cerulean Docs](https://docs.ceruleaonsonar.com) on the ROV so they can be viewed offline. ",
                "company": {
                    "name": "Cerulean Sonar",
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com"
                },
                "support": "https://forum.ceruleansonar.com/categories"
            },
            "v1.0.0": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": "core >  1",
                "tag": "v1.0.0",
                "website": "https://ceruleansonar.com",
                "authors": [
                    {
                        "name": "Nick Nothom",
                        "email": "nick.nothom@ceruleansonar.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS Cerulean Docs\n\nHosts a mirror of the [Cerulean Docs](https://docs.ceruleaonsonar.com) on the ROV so they can be viewed offline. ",
                "company": {
                    "name": "Cerulean Sonar",
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com"
                },
                "support": "https://forum.ceruleansonar.com/categories"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/ceruleansonar/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/ceruleansonar/company_logo.png"
    },
    {
        "identifier": "bluerobotics.water-linked-dvl",
        "name": "Water Linked DVL",
        "description": "Enables ROV position holding and navigation",
        "docker": "bluerobotics/blueos-water-linked-dvl",
        "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL/",
        "versions": {
            "v1.0.1": {
                "permissions": {
                    "NetworkMode": "host"
                },
                "requirements": "core >  1",
                "tag": "v1.0.1",
                "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS-Water-Linked-DVL\n\n## Changelog\n\n### v1.0.1\n - Fixed an issue where the driver was sending Rangefinder messages with invalid data\n\nThis is a docker implementation of a Waterlinked DVL-a50 driver for the new Blue Robotics BlueOS.\n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/blueos:/root/.config --name=BlueOS-Water-Linked-DVL --restart=unless-stopped bluerobotics/blueos-water-linked-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL"
            },
            "v1.0.0": {
                "permissions": {
                    "NetworkMode": "host"
                },
                "requirements": "core >  1",
                "tag": "v1.0.0",
                "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "# BlueOS-Water-Linked-DVL\n\nThis is a docker implementation of a Waterlinked DVL-a50 driver for the new Blue Robotics BlueOS.\n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/blueos:/root/.config --name=BlueOS-Water-Linked-DVL --restart=unless-stopped bluerobotics/blueos-water-linked-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/bluerobotics/water-linked-dvl/extension_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/bluerobotics/company_logo.png"
    },
    {
        "identifier": "bluerobotics.waterlinked-ugps",
        "name": "Underwater GPS support",
        "description": "In development, needs testing.",
        "docker": "williangalvani/blueos-ugps",
        "website": "https://github.com/Williangalvani/blueos-ugps-extension",
        "versions": {
            "v1.0.1": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "Env": [
                        "UGPS_IP=192.168.2.94",
                        "TOPSIDE_IP=192.168.2.1"
                    ],
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": "core >= 1",
                "tag": "v1.0.1",
                "website": "https://github.com/Williangalvani/blueos-ugps-extension/",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "### UGPS Extension\n\n\u26a0\ufe0f This extension **has not been validated**, and currently **has no UI page** (so creates no listing in the sidebar).\n\n#### Usage\n\nConfiguration is done by editing the extension in the \"Installed\" tab of the Extensions Manager.\n\nEditing requires [Pirate Mode](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-latest/advanced-usage/#pirate-mode)\nto be enabled, after which the \"Edit\" button can be used. Copy the Original Settings contents\ninto the Custom settings box, and (if necessary) change the IPs to relevant alternatives:\n```\n    \"UGPS_IP=192.168.2.94\",\n    \"TOPSIDE_IP=192.168.2.1\"\n```\n\nUse the \"View Logs\" button to check the status.\n\n#### Communication Details\n\nAssuming the UGPS is detected and working (which should be visible in the extension logs):\n- the extension sends depth and orientation information to the UGPS (to enable it to function)\n- the extension sends NMEA GPS messages of the master position to port `14401` on the topside\n- the extension sends`GPS_INPUT` MAVLink messages of the locator position to the autopilot\n    - the autopilot should send corresponding `GPS_RAW_INT` messages to the topside\n- the autopilot sends regular `GLOBAL_POSITION_INT` messages to the topside with its filtered position estimates\n",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/blueos-ugps-extension/"
            },
            "v0.0.1": {
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": "core >= 1",
                "tag": "v0.0.1",
                "website": "https://github.com/Williangalvani/blueos-ugps-extension/",
                "authors": [
                    {
                        "name": "Willian Galvani",
                        "email": "willian@bluerobotics.com"
                    }
                ],
                "docs": null,
                "readme": "Experimental, not working\n",
                "company": {
                    "name": "Blue Robotics",
                    "about": "",
                    "email": "support@bluerobotics.com"
                },
                "support": "https://github.com/Williangalvani/blueos-ugps-extension/"
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/bluerobotics/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/bluerobotics/company_logo.png"
    },
    {
        "identifier": "bluerobotics.cockpit",
        "name": "Cockpit",
        "description": "In development, use it at your own risk .",
        "docker": "bluerobotics/cockpit",
        "website": "https://github.com/bluerobotics/cockpit",
        "versions": {
            "v0.0.7": {
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": null,
                "tag": "v0.0.7",
                "website": null,
                "authors": [],
                "docs": null,
                "readme": null,
                "company": null,
                "support": null
            },
            "v0.0.6": {
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": null,
                "tag": "v0.0.6",
                "website": null,
                "authors": [],
                "docs": null,
                "readme": null,
                "company": null,
                "support": null
            },
            "v0.0.5": {
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": null,
                "tag": "v0.0.5",
                "website": null,
                "authors": [],
                "docs": null,
                "readme": null,
                "company": null,
                "support": null
            },
            "v0.0.4": {
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": null,
                "tag": "v0.0.4",
                "website": null,
                "authors": [],
                "docs": null,
                "readme": null,
                "company": null,
                "support": null
            },
            "v0.0.3": {
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": null,
                "tag": "v0.0.3",
                "website": null,
                "authors": [],
                "docs": null,
                "readme": null,
                "company": null,
                "support": null
            },
            "v0.0.2": {
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": null,
                "tag": "v0.0.2",
                "website": null,
                "authors": [],
                "docs": null,
                "readme": null,
                "company": null,
                "support": null
            },
            "v0.0.1": {
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "requirements": null,
                "tag": "v0.0.1",
                "website": null,
                "authors": [],
                "docs": null,
                "readme": null,
                "company": null,
                "support": null
            }
        },
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/bluerobotics/company_logo.png",
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master//repos/bluerobotics/company_logo.png"
    }
]