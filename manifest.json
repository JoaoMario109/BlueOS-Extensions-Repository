[
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/ceruleansonar/company_logo.png",
        "description": "Cross platform sonar viewing application",
        "docker": "nicknothom/sonarview",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/ceruleansonar/company_logo.png",
        "identifier": "ceruleansonar.sonarview",
        "name": "SonarView",
        "versions": {
            "1.8.4": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "e2190f62-0752-5376-85f7-b20f3a894c90",
                "images": [
                    {
                        "digest": "sha256:438de8ade5df2138b3cf547eed234d3714363eed3274dbe84afe0c609fbc6dda",
                        "expanded_size": 88682992,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:626fa4b14d82af6abd400955aa7e4e9002f4114ba3fd93bb45a9a8f062157bb8",
                        "expanded_size": 86912704,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "7077/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "PortBindings": {
                            "7077/tcp": [
                                {
                                    "HostPort": "7077"
                                }
                            ]
                        }
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.8.4",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.8.6": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "ae85d4e9-b505-5fee-8b4a-bfde53c2ce1c",
                "images": [
                    {
                        "digest": "sha256:0b4f1108a4b8dfe4b578340c737a1abdb80390aaac27d9fd1c96a36ef25dfb71",
                        "expanded_size": 88682483,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.8.6",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.8.7": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "0b5db325-ab1d-58c5-ab75-2bdb770062fd",
                "images": [
                    {
                        "digest": "sha256:e54452a1e20c18535c96f84dd53004ee43f23350c1dc59ce035ca424f327ee62",
                        "expanded_size": 40152206,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.8.7",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.8.8": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "fb4fabcc-f735-59ce-a42d-2789ee981753",
                "images": [
                    {
                        "digest": "sha256:e383cb1e41637b2fbaa30684bbba68373cf655cbe3ca7c4f23fbce15b467a23e",
                        "expanded_size": 40153513,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.8.8",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.8.9": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "9a7a409f-5c18-5c3e-b8df-9c8bf2a69959",
                "images": [
                    {
                        "digest": "sha256:cd327daa249b1b355617531db9f751ff2099ef3e2881c736f2e12eff31c97daf",
                        "expanded_size": 40153725,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:a21de0655ed73d40b7415f5e85bd727d709c9517d9960b10e2d4e5dee49624e9",
                        "expanded_size": 38383327,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.8.9",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.9.10-beta": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "928cbe63-a345-597c-9842-912381024d38",
                "images": [
                    {
                        "digest": "sha256:dbde9a9f8144cc232224b67a73e61ef853e99f59682fb6e449cc7b6173b388b9",
                        "expanded_size": 37537954,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:0864648de9a0b21141eeb3f6bfd0a7bb065a7b32033ad9c10e01a81504d25272",
                        "expanded_size": 35750482,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.9.10-beta",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.9.12-beta.7": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "37cf3df4-a47b-5787-8c68-2ce193cc9224",
                "images": [
                    {
                        "digest": "sha256:f813cd7f5be1895be141b816a6f216fde2b191f710a054ce61f8411cd2896af0",
                        "expanded_size": 42093819,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:4ebbc42072d29c9c40fa1117613187cca80221b90da372b87cd6fc51ce4f6b4b",
                        "expanded_size": 40285609,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:22858307b0f0287f3c2e115480bd7abd58215fc3d635d9b0b04ed8c5fe692100",
                        "expanded_size": 42092623,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.9.12-beta.7",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.9.12-beta.8": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "e2d5ea6f-d93b-5db2-8c6f-c10c1d652ea6",
                "images": [
                    {
                        "digest": "sha256:f28eb276d147a8c5b33f766568758ea1262b42a512ba14ecbdd3702a03bf7609",
                        "expanded_size": 44663580,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:3b8b7880f4ce78bab0ab1a28d2bb9aaf92cffc1cf807f905e45de1406885acdd",
                        "expanded_size": 42853915,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:72337e56947e2b73521a626f8db1692a17d9b54f95787784edda76236e70ffce",
                        "expanded_size": 44661331,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.9.12-beta.8",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.9.12-beta.9": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "572ecada-021f-5961-9c71-c79deb82fe25",
                "images": [
                    {
                        "digest": "sha256:d6df72a318702657bc906168a6f42b74fe2a6b06fd0d51432db7901551cfdbd3",
                        "expanded_size": 44662782,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:d9521aca36f3adb67a84358499748d9386edfead62f1ca0838dec52ef9422382",
                        "expanded_size": 42853862,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:69c793475a75f74f246a000181ddcab97f0e357119137070c692ded072adb26b",
                        "expanded_size": 44661283,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.9.12-beta.9",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.9.4-beta": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "a3147341-4ef6-5d6c-9996-b20af70a479a",
                "images": [
                    {
                        "digest": "sha256:83485dc7b0da830af6f36335b66b300037bce1a50a8c15539e199bc5b5ae63a2",
                        "expanded_size": 37322814,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.9.4-beta",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.9.5-beta": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "957939f1-d143-5746-8ce6-c77b6058ce77",
                "images": [
                    {
                        "digest": "sha256:284a1ce24317ac244cfecc64b51eb575066fa4ea9494296ad32444266d5262da",
                        "expanded_size": 37322172,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.9.5-beta",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.9.7": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "84568eec-06cf-5d1f-8be6-13370e975317",
                "images": [
                    {
                        "digest": "sha256:e5fd060a84f428907d131fec6f3db6155a63e26b007549607168590662bd0a6e",
                        "expanded_size": 37352684,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.9.7",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "1.9.8": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "3d33dc4f-e0cd-5018-836f-a1103bef5a6a",
                "images": [
                    {
                        "digest": "sha256:5a89bc379242f3d477f5ee63d83bd41259e0c9f30a9b4e6c7c64dd5259ef7999",
                        "expanded_size": 72808777,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:835ef36209e513f79662b5647c49db8956a7d294e3b0fac7a1fb351d68296e29",
                        "expanded_size": 71022758,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "1.9.8",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            },
            "v1.5.3": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "c023a21a-e698-5c5a-b73c-c47ed8a7d191",
                "images": [
                    {
                        "digest": "sha256:0ebec5d7354aef2d54892b93751c8be9400dc75ba807e9748bc9a004dbc20802",
                        "expanded_size": 228960777,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.5.3",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.5.6": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "3a754d6f-752d-5aba-8e9f-a6aa191f75a8",
                "images": [
                    {
                        "digest": "sha256:04b5b0fb80df9efd4a916458373fbfa1c224aef8aad13d947c63280f3ecda691",
                        "expanded_size": 213188027,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.5.6",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.6.0": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "24f37979-7e67-5ffe-bed3-7256c993fe29",
                "images": [
                    {
                        "digest": "sha256:1b204fba77d384ba749438f336a93bc59c9553c71b92a6a4f6445b2866d42a94",
                        "expanded_size": 211808388,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.6.0",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.7.0": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "941aa767-6942-5c8d-bcbf-7d7be4ef568f",
                "images": [
                    {
                        "digest": "sha256:e0a26d7c8cc8a2284f0cb87b91e228a7295f4b49fe2c54b5859f8df53939e1c2",
                        "expanded_size": 211805077,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.7.0",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.8.0": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "c3aec70f-583f-511f-8182-54e01dfb2d6c",
                "images": [
                    {
                        "digest": "sha256:a0b1e746fa1f084c51c28212fc69702c993c393c952a9c2d4c62bdb323459014",
                        "expanded_size": 211965325,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ]
                    },
                    "NetworkMode": "host"
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.8.0",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.8.3": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "Cerulean Sonar: Advanced Technology. Sensibly Priced.",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "fd80de19-5c32-5101-937c-f1e094ce7d20",
                "images": [
                    {
                        "digest": "sha256:438de8ade5df2138b3cf547eed234d3714363eed3274dbe84afe0c609fbc6dda",
                        "expanded_size": 88682992,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:626fa4b14d82af6abd400955aa7e4e9002f4114ba3fd93bb45a9a8f062157bb8",
                        "expanded_size": 86912704,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "7077/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/SonarView:/userdata"
                        ],
                        "PortBindings": {
                            "7077/tcp": [
                                {
                                    "HostPort": "7077"
                                }
                            ]
                        }
                    }
                },
                "readme": "# SonarView\n\n[Get the latest release here](https://github.com/CeruleanSonar/SonarView/releases/latest)\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.8.3",
                "type": "device-integration",
                "website": "https://ceruleansonar.com"
            }
        },
        "website": "https://sonarview.io/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/ceruleansonar/company_logo.png",
        "description": "BlueOS extension for Cerulean DVL",
        "docker": "nicknothom/blueos-cerulean-dvl",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/ceruleansonar/company_logo.png",
        "identifier": "ceruleansonar.cerulean-dvl",
        "name": "Cerulean DVL",
        "versions": {
            "v1.0.1": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "5fda492f-72b4-54c0-bd0f-fca4761a0bfd",
                "images": [
                    {
                        "digest": "sha256:d5e8e487e02db3573da4b82b5c1bffcfd7dc56115aabc9e31d46b441205e8678",
                        "expanded_size": 109912491,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/cerulean:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.0.1",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.0.2": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "57d15a76-04cd-515d-a297-58a4bb60088e",
                "images": [
                    {
                        "digest": "sha256:9c14841b20f85887b029071ae14592ac0235ed0764256743b1db398b294a727b",
                        "expanded_size": 109912487,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/cerulean:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.0.2",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.0.4": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "2056eda3-d739-511c-a708-054d2ef830c2",
                "images": [
                    {
                        "digest": "sha256:43fac24a1199fe0c9bcf5b61df0278f56197b744285cf30d8316bf7d1065e983",
                        "expanded_size": 109534449,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/cerulean:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.0.4",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.0.5": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "eb83e2bc-7f5a-5eb5-b5ab-95ca97364c27",
                "images": [
                    {
                        "digest": "sha256:49315a9023689999db2e765c1c8478ebd8decfe2904ba287349268442aa969bd",
                        "expanded_size": 109559450,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/blueos:/root/.config"
                        ]
                    },
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/cerulean:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.0.5",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.0.6": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "b52186e9-c76e-5768-bf31-d34231668d0e",
                "images": [
                    {
                        "digest": "sha256:2638f474a73f2eb41bb1a5f237cd72eac2078d55cc3501d04c503bfa82cbe854",
                        "expanded_size": 109617694,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/cerulean:/root/.config"
                        ]
                    },
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/cerulean:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.0.6",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.0.7": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "8f856745-ea5b-56a3-87fe-c893f0bf2a9a",
                "images": [
                    {
                        "digest": "sha256:063633731be76427d7be0266216d618a1769287135f0c879a4488506f5feb553",
                        "expanded_size": 109619348,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/cerulean:/root/.config"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/cerulean:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.0.7",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.0.8": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "aa686520-e5f6-5cfb-ac69-b414de3e694a",
                "images": [
                    {
                        "digest": "sha256:40bdaa212803402e97dcd013000c5991ddc950ce4120a93bdd8e30b876e26324",
                        "expanded_size": 109619325,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:e208ec461095ed3491a3c38ab7913afe855d9850b4f29f13e620c4f71715bc8c",
                        "expanded_size": 100085882,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/cerulean:/root/.config"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# BlueOS-Cerulean-DVL\n\nCerulean DVL driver, compatible with Blue Robotics BlueOS.\n\n## Manual Installation: \n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/cerulean:/root/.config --name=BlueOS-Cerulean-DVL --restart=unless-stopped nicknothom/blueos-cerulean-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": null,
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.0.8",
                "type": "other",
                "website": "https://ceruleansonar.com"
            }
        },
        "website": "https://github.com/ceruleansonar/BlueOS-Cerulean-DVL/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/ceruleansonar/company_logo.png",
        "description": "Offline access for Cerulean Documentation",
        "docker": "nicknothom/blueos-cerulean-docs",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/ceruleansonar/company_logo.png",
        "identifier": "ceruleansonar.cerulean-docs",
        "name": "Cerulean Docs",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "e6424a8a-3f3c-5312-9511-6d58f284e9fe",
                "images": [
                    {
                        "digest": "sha256:16039d43f4823cf408e2a44d93438c33caf6d00f4b716e4028b2e3314d04b40e",
                        "expanded_size": 175622566,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# BlueOS Cerulean Docs\n\nHosts a mirror of the [Cerulean Docs](https://docs.ceruleaonsonar.com) on the ROV so they can be viewed offline. ",
                "requirements": "core >  1",
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://ceruleansonar.com"
            },
            "v1.1.0": {
                "authors": [
                    {
                        "email": "nick.nothom@ceruleansonar.com",
                        "name": "Nick Nothom"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "dennys.bisogno@ceruleansonar.com",
                    "name": "Cerulean Sonar"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "d50945d9-c307-5261-b40d-1f260ac0b6a4",
                "images": [
                    {
                        "digest": "sha256:bd71575157ca09fdb6a1b2f8072d56ea27ff0ef9176375d789d893f70cfa7a50",
                        "expanded_size": 175566507,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:bb85774c6ced6dae9b9b75cc66a3c0f2aeb20c61b5cb5ad37e393f688c93e843",
                        "expanded_size": 170030192,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS Cerulean Docs\n\nHosts a mirror of the [Cerulean Docs](https://docs.ceruleaonsonar.com) on the ROV so they can be viewed offline. ",
                "requirements": "core >  1",
                "support": "https://forum.ceruleansonar.com/categories",
                "tag": "v1.1.0",
                "type": "other",
                "website": "https://ceruleansonar.com"
            }
        },
        "website": "https://github.com/ceruleansonar/BlueOS-Cerulean-Docs/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/waterlinked/company_logo.png",
        "description": "Provides location with GPS and SBL acoustic positioning",
        "docker": "waterlinked/blueos-ugps-extension",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/waterlinked/ugps/extension_logo.png",
        "identifier": "waterlinked.ugps",
        "name": "Water Linked UGPS",
        "versions": {
            "v1.0.4": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com / support@waterlinked.com",
                    "name": "Blue Robotics / Water Linked"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "07593b5f-33d9-512b-92e7-bde2b70e0c1a",
                "images": [
                    {
                        "digest": "sha256:55811587b48ae3f980fa069e27d74c11a98567bd141eb2cb29cd3a0a43c39526",
                        "expanded_size": 43100109,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "UGPS_HOST=http://192.168.2.94",
                        "MAVLINK_HOST=http://192.168.2.2:6040",
                        "QGC_IP=192.168.2.1"
                    ],
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS Extension for Water Linked Underwater GPS\n\n## State\n\nThis extension is currently in development. It **has no UI page** (so creates no listing in the sidebar of BlueOS).\n\n## Functionality\n\nAssuming the UGPS is detected and working this service\n* forwards MAVLink data from [Mavlink2Rest](https://github.com/patrickelectric/mavlink2rest) like depth to the UGPS Topside (to enable it to function)\n* forwards locator position from UGPS Topside to MAVLink (message `GPS_INPUT`)\n    * the autopilot should send corresponding `GPS_RAW_INT` messages to the topside computer (QGroundControl)\n    * the autopilot sends regular `GLOBAL_POSITION_INT` messages to the topside computer with its filtered position estimates\n* forwards topside position from UGPS Topside to UDP port `14401` with NMEA to be received by QGroundControl (implemented, but currently not tested)\n\nIf you do not have access to a UGPS system, you can use UGPS_HOST=https://demo.waterlinked.com , which simulates a UGPS system with its API.\n\nHardware documentation can be found at https://waterlinked.github.io/underwater-gps/integration/bluerov-integration/\n\n## How to install\n\nThere are 2 options\n\n### Use the extensions manager in BlueOS 1.1.0\n* Click Extensions > Extensions Manager\n* Install this extension\n\nConfiguration is usually not required, but can be done by editing the extension in the \"Installed\" tab of the Extensions Manager.\n\nEditing requires [Pirate Mode](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-latest/advanced-usage/#pirate-mode)\nto be enabled, after which the \"Edit\" button can be used. Copy the Original Settings contents\ninto the Custom settings box, and (if necessary) change the IPs/Host addresses:\n```\n    \"UGPS_HOST=http://192.168.2.94\",\n    \"MAVLINK_HOST=http://192.168.2.2:6040\",\n    \"QGC_IP=192.168.2.1\"\n```\n\nUse the \"View Logs\" button to check the status.\n\n### Build docker image yourself and start it\n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal))\n\ninstall git, clone this repository and run\n```\n# build the docker image\ndocker build -t waterlinked/blueos-ugps-extension:latest .\n# see all images\ndocker images\n\n# running the plugin\n\n# either: run detached\n#   with standard command\ndocker run -d --net=host waterlinked/blueos-ugps-extension:latest python app/main.py --ugps_host http://192.168.2.94 --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n#   or with demo server\ndocker run -d --net=host waterlinked/blueos-ugps-extension:latest python app/main.py --ugps_host https://demo.waterlinked.com --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n\n# or: in interactive shell to get debug output\ndocker run -it waterlinked/blueos-ugps-extension:latest /bin/bash\n#   with standard command\ncd app && python main.py --ugps_host http://192.168.2.94 --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n#   or with demo server\ncd app && python main.py --ugps_host https://demo.waterlinked.com --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n# end interactive session\nexit\n\n# then stop/start/look at log with\ndocker stop [container-id]\ndocker start [container-id]\ndocker log [container-id] # if run detached\n\n# if you are a developer, upload to registry with (replace latest with desired tag)\ndocker login -u waterlinked\ndocker push waterlinked/blueos-ugps-extension:latest\n```",
                "requirements": "core >= 1",
                "support": "https://github.com/waterlinked/blueos-ugps-extension",
                "tag": "v1.0.4",
                "type": "other",
                "website": "https://github.com/waterlinked/blueos-ugps-extension"
            },
            "v1.0.6": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@waterlinked.com",
                    "name": "Water Linked"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "short-baseline"
                ],
                "identifier": "a16ae9c5-eeb8-5263-8b1c-0401b0a1e2da",
                "images": [
                    {
                        "digest": "sha256:d1c746dac6246d215f00966754129fb78375c1e98bba95d9a0f3a165a2522805",
                        "expanded_size": 44982471,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "UGPS_HOST=http://192.168.2.94",
                        "MAVLINK_HOST=http://192.168.2.2:6040",
                        "QGC_IP=192.168.2.1",
                        "EXTRA_ARGS="
                    ],
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS Extension for Water Linked Underwater GPS\n\n## State\n\nThis extension is currently in development. It **has no UI page** (so creates no listing in the sidebar of BlueOS).\n\n## Functionality\n\nAssuming the UGPS is detected and working this service\n* forwards MAVLink data from [Mavlink2Rest](https://github.com/patrickelectric/mavlink2rest) like depth to the UGPS Topside (to enable it to function)\n* forwards locator position from UGPS Topside to MAVLink (message `GPS_INPUT`)\n    * the autopilot should send corresponding `GPS_RAW_INT` messages to the topside computer (QGroundControl)\n    * the autopilot sends regular `GLOBAL_POSITION_INT` messages to the topside computer with its filtered position estimates\n* forwards topside position from UGPS Topside to UDP port `14401` with NMEA to be received by QGroundControl.\n\nIf you do not have access to a UGPS system, you can use UGPS_HOST=https://demo.waterlinked.com , which simulates a UGPS system with its API.\n\nHardware documentation can be found at https://waterlinked.github.io/underwater-gps/integration/bluerov-integration/\n\n## How to install\n\nThere are 2 options\n\n### Use the extensions manager in BlueOS 1.1.0\n* Click Extensions > Extensions Manager\n* Install this extension\n\nConfiguration is usually not required, but can be done by editing the extension in the \"Installed\" tab of the Extensions Manager.\n\nEditing requires [Pirate Mode](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-latest/advanced-usage/#pirate-mode)\nto be enabled, after which the \"Edit\" button can be used. Copy the Original Settings contents\ninto the Custom settings box, and (if necessary) change the IPs/Host addresses, e.g. to use the demo server:\n```\n{\n  \"NetworkMode\": \"host\",\n  \"Env\": [\n  \"UGPS_HOST=https://demo.waterlinked.com\",\n  \"MAVLINK_HOST=http://192.168.2.2:6040\",\n  \"QGC_IP=192.168.2.1\",\n  \"EXTRA_ARGS=\"\n  ]\n}\n```\n\nUse the \"View Logs\" button to check the status.\n\n### Build docker image yourself and start it\n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal))\n\ninstall git, clone this repository and run\n```\n# build the docker image\ndocker build -t waterlinked/blueos-ugps-extension:latest .\n# see all images\ndocker images\n\n# running the plugin\n\n# either: run detached\n#   with standard command\ndocker run -d --net=host waterlinked/blueos-ugps-extension:latest python app/main.py --ugps_host http://192.168.2.94 --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n#   or with demo server\ndocker run -d --net=host waterlinked/blueos-ugps-extension:latest python app/main.py --ugps_host https://demo.waterlinked.com --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n\n# or: in interactive shell to get debug output\ndocker run -it waterlinked/blueos-ugps-extension:latest /bin/bash\n#   with standard command\ncd app && python main.py --ugps_host http://192.168.2.94 --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n#   or with demo server\ncd app && python main.py --ugps_host https://demo.waterlinked.com --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n# end interactive session\nexit\n\n# then stop/start/look at log with\ndocker stop [container-id]\ndocker start [container-id]\ndocker log [container-id] # if run detached\n\n# if you are a developer, upload to registry with (replace latest with desired tag)\ndocker login -u waterlinked\ndocker push waterlinked/blueos-ugps-extension:latest\n```",
                "requirements": "core >= 1.1",
                "support": "https://github.com/waterlinked/blueos-ugps-extension/issues",
                "tag": "v1.0.6",
                "type": "device-integration",
                "website": "https://github.com/waterlinked/blueos-ugps-extension"
            },
            "v1.0.7-beta.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@waterlinked.com",
                    "name": "Water Linked"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "short-baseline"
                ],
                "identifier": "d1d3cffe-5837-5348-8d19-67f7c271f461",
                "images": [
                    {
                        "digest": "sha256:90ee1221fa1180cf9df8ba951fe9f7bd72223ff867c99c99b97691baa8063ac7",
                        "expanded_size": 44991174,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "UGPS_HOST=http://192.168.2.94",
                        "MAVLINK_HOST=http://192.168.2.2:6040",
                        "QGC_IP=192.168.2.1",
                        "EXTRA_ARGS="
                    ],
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS Extension for Water Linked Underwater GPS\n\n## State\n\nThis extension **has no UI page** (so it creates no listing in the sidebar of BlueOS).\n\n## Functionality\n\nAssuming the UGPS is detected and working, this service\n* forwards MAVLink data from [Mavlink2Rest](https://github.com/patrickelectric/mavlink2rest) like depth to the UGPS Topside (to enable it to function)\n* forwards locator position from UGPS Topside to MAVLink (message `GPS_INPUT`)\n    * the autopilot should send corresponding `GPS_RAW_INT` messages to the topside computer (QGroundControl)\n    * the autopilot sends regular `GLOBAL_POSITION_INT` messages to the topside computer with its filtered position estimates\n* forwards topside position from UGPS Topside to UDP port `14401` with NMEA to be received by QGroundControl.\n    * This feature is **experimental** and does not work reliably with all version of QGroundControl.\n\nIf you do not have access to a UGPS system, you can use UGPS_HOST=https://demo.waterlinked.com , which simulates a UGPS system with its API.\n\nHardware documentation can be found at https://waterlinked.github.io/underwater-gps/integration/bluerov-integration/\n\n## How to install\n\nThere are 2 options\n\n### Preferred: Use the extensions manager in BlueOS > 1.1.0\n* Click Extensions > Extensions Manager\n* Install this extension\n\nConfiguration is usually not required, but can be done by editing the extension in the \"Installed\" tab of the Extensions Manager.\n\nEditing requires [Pirate Mode](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-latest/advanced-usage/#pirate-mode)\nto be enabled, after which the \"Edit\" button can be used. Copy the Original Settings contents\ninto the Custom settings box, and (if necessary) change the IPs/Host addresses, e.g. to use the demo server:\n```\n{\n  \"NetworkMode\": \"host\",\n  \"Env\": [\n  \"UGPS_HOST=https://demo.waterlinked.com\",\n  \"MAVLINK_HOST=http://192.168.2.2:6040\",\n  \"QGC_IP=192.168.2.1\",\n  \"EXTRA_ARGS=\"\n  ]\n}\n```\n\nUse the \"View Logs\" button to check the status.\n\n### For developers: Build docker image yourself and start it\n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal))\n\ninstall git, clone this repository and run\n```\n# build the docker image\ndocker build -t waterlinked/blueos-ugps-extension:latest .\n# see all images\ndocker images\n\n# running the plugin\n\n# either: run detached\n#   with standard command\ndocker run -d --net=host waterlinked/blueos-ugps-extension:latest python app/main.py --ugps_host http://192.168.2.94 --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n#   or with demo server\ndocker run -d --net=host waterlinked/blueos-ugps-extension:latest python app/main.py --ugps_host https://demo.waterlinked.com --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n\n# or: in interactive shell to get debug output\ndocker run -it waterlinked/blueos-ugps-extension:latest /bin/bash\n#   with standard command\ncd app && python main.py --ugps_host http://192.168.2.94 --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n#   or with demo server\ncd app && python main.py --ugps_host https://demo.waterlinked.com --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n# end interactive session\nexit\n\n# then stop/start/look at log with\ndocker stop [container-id]\ndocker start [container-id]\ndocker log [container-id] # if run detached\n\n# if you are a developer, upload the docker image to registry with (replace \"latest\" with desired tag)\ndocker login -u waterlinked\ndocker push waterlinked/blueos-ugps-extension:latest\n```\n",
                "requirements": "core >= 1.1",
                "support": "https://github.com/waterlinked/blueos-ugps-extension/issues",
                "tag": "v1.0.7-beta.1",
                "type": "device-integration",
                "website": "https://github.com/waterlinked/blueos-ugps-extension"
            },
            "v1.0.7-beta.2": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@waterlinked.com",
                    "name": "Water Linked"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "short-baseline"
                ],
                "identifier": "01960110-d3b4-5ec9-b831-fc6ed5504c76",
                "images": [
                    {
                        "digest": "sha256:827ca6180221c282ced1a2c58e02388c1cf1b4eb87cca1604355a90bf0b81293",
                        "expanded_size": 42996077,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "UGPS_HOST=http://192.168.2.94",
                        "MAVLINK_HOST=http://192.168.2.2:6040",
                        "QGC_IP=192.168.2.1",
                        "EXTRA_ARGS="
                    ],
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS Extension for Water Linked Underwater GPS\n\n## State\n\nThis extension **has no UI page** (so it creates no listing in the sidebar of BlueOS).\n\n## Functionality\n\nAssuming the UGPS is detected and working, this service\n* forwards MAVLink data from [Mavlink2Rest](https://github.com/patrickelectric/mavlink2rest) like depth to the UGPS Topside (to enable it to function)\n* forwards locator position from UGPS Topside to MAVLink (message `GPS_INPUT`)\n    * the autopilot should send corresponding `GPS_RAW_INT` messages to the topside computer (QGroundControl)\n    * the autopilot sends regular `GLOBAL_POSITION_INT` messages to the topside computer with its filtered position estimates\n* forwards topside position from UGPS Topside to UDP port `14401` with NMEA to be received by QGroundControl.\n    * This feature is **experimental** and does not work reliably with all version of QGroundControl.\n\nIf you do not have access to a UGPS system, you can use UGPS_HOST=https://demo.waterlinked.com , which simulates a UGPS system with its API.\n\nHardware documentation can be found at https://waterlinked.github.io/underwater-gps/integration/bluerov-integration/\n\n## How to install\n\nThere are 2 options\n\n### Preferred: Use the extensions manager in BlueOS > 1.1.0\n* Click Extensions > Extensions Manager\n* Install this extension\n\nConfiguration is usually not required, but can be done by editing the extension in the \"Installed\" tab of the Extensions Manager.\n\nEditing requires [Pirate Mode](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-latest/advanced-usage/#pirate-mode)\nto be enabled, after which the \"Edit\" button can be used. Copy the Original Settings contents\ninto the Custom settings box, and (if necessary) change the IPs/Host addresses, e.g. to use the demo server:\n```\n{\n  \"NetworkMode\": \"host\",\n  \"Env\": [\n  \"UGPS_HOST=https://demo.waterlinked.com\",\n  \"MAVLINK_HOST=http://192.168.2.2:6040\",\n  \"QGC_IP=192.168.2.1\",\n  \"EXTRA_ARGS=\"\n  ]\n}\n```\n\nUse the \"View Logs\" button to check the status.\n\n### For developers: Build docker image yourself and start it\n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal))\n\ninstall git, clone this repository and run\n```\n# build the docker image\ndocker build -t waterlinked/blueos-ugps-extension:latest .\n# see all images\ndocker images\n\n# running the plugin\n\n# either: run detached\n#   with standard command\ndocker run -d --net=host waterlinked/blueos-ugps-extension:latest python app/main.py --ugps_host http://192.168.2.94 --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n#   or with demo server\ndocker run -d --net=host waterlinked/blueos-ugps-extension:latest python app/main.py --ugps_host https://demo.waterlinked.com --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n\n# or: in interactive shell to get debug output\ndocker run -it waterlinked/blueos-ugps-extension:latest /bin/bash\n#   with standard command\ncd app && python main.py --ugps_host http://192.168.2.94 --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n#   or with demo server\ncd app && python main.py --ugps_host https://demo.waterlinked.com --mavlink_host http://192.168.2.2:6040 --qgc_ip 192.168.2.1\n# end interactive session\nexit\n\n# then stop/start/look at log with\ndocker stop [container-id]\ndocker start [container-id]\ndocker log [container-id] # if run detached\n\n# if you are a developer, upload the docker image to registry with (replace \"latest\" with desired tag)\ndocker login -u waterlinked\ndocker push waterlinked/blueos-ugps-extension:latest\n```\n",
                "requirements": "core >= 1.1",
                "support": "https://github.com/waterlinked/blueos-ugps-extension/issues",
                "tag": "v1.0.7-beta.2",
                "type": "device-integration",
                "website": "https://github.com/waterlinked/blueos-ugps-extension"
            }
        },
        "website": "https://github.com/waterlinked/blueos-ugps-extension"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/clydemcqueen/company_logo.png",
        "description": "Send NMEA position information (GGA, HDT) to Water Linked UGPS",
        "docker": "clydemcqueen/wl_ugps_external_extension",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/clydemcqueen/wl_ugps_external/extension_logo.png",
        "identifier": "clydemcqueen.wl_ugps_external",
        "name": "WL UGPS External",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "clyde@mcqueen.net",
                        "name": "Clyde McQueen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "clyde@mcqueen.net",
                    "name": "Discovery Bay Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "short-baseline"
                ],
                "identifier": "b0578e4c-ce55-55d4-8f15-6769980b788c",
                "images": [
                    {
                        "digest": "sha256:5c36bfe11ab66417047206a99a7f6fe4c907af9f6732e689ef922c223f8cbd73",
                        "expanded_size": 44578831,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "UGPS_HOST=http://192.168.2.94",
                        "SEND_RATE=2.0"
                    ],
                    "ExposedPorts": {
                        "6200:6200/udp": {},
                        "8080/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "6200/udp": [
                                {
                                    "HostPort": "6200"
                                }
                            ],
                            "8080/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# WL UGPS External Position BlueOS Extension \n\nA simple [BlueOS Extension](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.1/development/extensions/)\nthat listens for NMEA messages (GGA and HDT) and sends position information to the\n[Water Linked UGPS](https://waterlinked.com/underwater-gps-g2) system.\n\n![Extension UI](images/extension_ui.png)\n\n## Typical Configuration\n\nAdd a satellite compass to the vessel and connect it to the ROV Ethernet network.\n* It should have a static IP address on the 192.168.2.X subnet\n* It should send GGA and HDT messages via UDP to BlueOS at 192.168.2.2:6200\n\nInstall this extension in BlueOS:\n* Select _Extensions_ in the sidebar, then the _Installed_ tab\n* Click on the + icon in the lower right\n* Enter the following information, then click _Create_\n\n_Extension Identifier_\n~~~\nclydemcqueen.wl_ugps_external_extension\n~~~\n\n_Extension Name_\n~~~\nwl_ugps_external_extension\n~~~\n\n_Docker image_\n~~~\nclydemcqueen/wl_ugps_external_extension\n~~~\n\n_Docker tag_\n~~~\nlatest\n~~~\n\n_Custom settings_\n~~~\n{\n  \"ExposedPorts\": {\n    \"8080/tcp\": {},\n    \"6200:6200/udp\": {}\n  },\n  \"HostConfig\": {\n    \"PortBindings\": {\n      \"6200/udp\": [\n        {\n          \"HostPort\": \"6200\"\n        }\n      ],\n      \"8080/tcp\": [\n        {\n          \"HostPort\": \"\"\n        }\n      ]\n    }\n  },\n  \"Env\": [\n    \"UGPS_HOST=http://192.168.2.94\",\n    \"SEND_RATE=2.0\"\n  ]\n}\n~~~\n\nYou should see the extension running:\n\n![Extension running](images/extension_running.png)\n\nAfter a few moments you should see the _WL UGPS External_ entry in the sidebar.\nClick on it to see a very simple UI.\n\n## Arguments\n\n* `ugps_host` is typically `http://192.168.2.94`\n* `send_rate` is typically 2Hz\n\n## Caveats\n\n* The G2 box still needs a GPS fix to synchronize its clock.\n",
                "requirements": "core >= 1.1",
                "support": "https://github.com/clydemcqueen/wl_ugps_external_extension/issues",
                "tag": "v1.0.0",
                "type": "device-integration",
                "website": "https://github.com/clydemcqueen/wl_ugps_external_extension"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "clyde@mcqueen.net",
                        "name": "Clyde McQueen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "clyde@mcqueen.net",
                    "name": "Discovery Bay Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "short-baseline"
                ],
                "identifier": "32a5efd4-9364-5021-a677-9c6371f90e29",
                "images": [
                    {
                        "digest": "sha256:e0fab510697080cd9c972e1eeb987371fc49f11d64384574a1c80fd72da5c3a6",
                        "expanded_size": 44578751,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "UGPS_HOST=http://192.168.2.94",
                        "SEND_RATE=2.0"
                    ],
                    "ExposedPorts": {
                        "6200:6200/udp": {},
                        "8080/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "6200/udp": [
                                {
                                    "HostPort": "6200"
                                }
                            ],
                            "8080/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# WL UGPS External \n\nSend NMEA position information (GGA and HDT) to the [Water Linked UGPS](https://waterlinked.com/underwater-gps-g2) API.\n\n## Typical Configuration\n\nAdd a satellite compass to the topside vessel and connect it to the ROV Ethernet network.\n* It should have a static IP address on the 192.168.2.X subnet\n* It should send GGA and HDT messages via UDP to BlueOS at 192.168.2.2:6200\n\nInstall this extension in [BlueOS](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.1/overview/):\n* Select _Extensions_ in the sidebar\n* Click on _WL UGPS External_\n* Click _Install_\n\nAfter a few moments you should see the _WL UGPS External_ entry in the sidebar.\nClick on it to see a very simple UI.\n\n## Arguments\n\n* `UGPS_HOST` is the IP address of the WL UGPS G2 box, the default is `http://192.168.2.94`\n* `SEND_RATE` is the rate to send position information to the G2 box, the default is 2Hz\n\n## Caveats\n\n* The G2 box still needs a GPS fix to synchronize its clock.\n\n## Releases\n\n### v1.0.1\n\n* Simplified README\n\n### v1.0.0\n\n* Initial release\n",
                "requirements": "core >= 1.1",
                "support": "https://github.com/clydemcqueen/wl_ugps_external_extension/issues",
                "tag": "v1.0.1",
                "type": "device-integration",
                "website": "https://github.com/clydemcqueen/wl_ugps_external_extension"
            }
        },
        "website": "https://github.com/clydemcqueen/wl_ugps_external_extension"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/jmrobotics/company_logo.png",
        "description": "JM Connect Extension for BlueOS",
        "docker": "maphstra/jm-connect-blueos",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/jmrobotics/jm-connect/extension_logo.png",
        "identifier": "jmrobotics.jm-connect",
        "name": "JM Connect",
        "versions": {
            "0.0.1": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "b7af0fda-ea84-5b6a-82fa-e72932971ebd",
                "images": [
                    {
                        "digest": "sha256:6697aeaebf7b1ffe2847c7434e8a3dd2d42872efb359d0f978ba6152140313fa",
                        "expanded_size": 43060080,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "ROV_ID=<rov_id>"
                    ],
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ]
                    },
                    "NetworkMode": "host"
                },
                "readme": "Could not get readme, expected type to be text/plain but got text/html",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.1",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.0.2": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "a102f7fd-cb95-5bb6-99ed-3b0b1ae0b1cc",
                "images": [
                    {
                        "digest": "sha256:50251ec8c463a50ab3013bdcdd6bfb1f913c34ffe579f326c12d539b5bd14248",
                        "expanded_size": 55223354,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "Could not get readme, expected type to be text/plain but got text/html",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.2",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.0.3": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "04354e64-e2b2-59ba-b0d7-61cbe54a3820",
                "images": [
                    {
                        "digest": "sha256:c58fd0b5d2f68f9df5924ff54f444849aa1c413e40a2725bc01cf6a3b6ca3645",
                        "expanded_size": 98481100,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "Could not get readme, expected type to be text/plain but got text/html",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.3",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.0.4": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "fbde77c2-558e-5654-9fba-00720ba5ca46",
                "images": [
                    {
                        "digest": "sha256:a383b8e2f0888f718c52bc92f99d4180bce41e3d9d44ef6886b642e6ae2d1719",
                        "expanded_size": 98481422,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "Could not get readme, expected type to be text/plain but got text/html",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.4",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.0.5": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "5567cfc0-0947-559b-b69c-3a0eb7ebba12",
                "images": [
                    {
                        "digest": "sha256:df13934cdb1e4d0bd6b3dd5f1d94856866de13e5e1e246a817243510eab945b7",
                        "expanded_size": 94350096,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "Could not get readme, expected type to be text/plain but got text/html",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.5",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.0.6": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "d859a0f3-6010-5e77-bf71-73b51788130e",
                "images": [
                    {
                        "digest": "sha256:2d7302f32d74adfdebe98b99b9c2f9b596ab356be2deaa163185bae96d922002",
                        "expanded_size": 94349911,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "Could not get readme, expected type to be text/plain but got text/html",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.6",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.0.7": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "e2484dd2-e2ba-5ac4-9d91-7d717f618332",
                "images": [
                    {
                        "digest": "sha256:29567855a636348f71a638082d335c6229f095d74548b4b4d42ce5752a1a77fe",
                        "expanded_size": 96633870,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "Could not get readme, expected type to be text/plain but got text/html",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.7",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.0.8": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "8ea1115d-e017-5e93-b643-31269c341f4d",
                "images": [
                    {
                        "digest": "sha256:f4ca957ef8684090eb19561193c745a318565bac884edc9b7c936464867dcb3b",
                        "expanded_size": 97114085,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# JM Robotics, JM-Connect Extension.\n\nThis extension is for connecting your ROV to the JM Connect Ecosystem.\nIt also allows controlling focus-level of JM Robotics focus-cameras. \n\nIn addition you can stream audio from the rpi's camera at http://<rov-ip>:8137 (beta)\n\n",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.8",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.0.9": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "79a9df48-e803-535b-8859-5b0d7c4ac99b",
                "images": [
                    {
                        "digest": "sha256:fe37249ef731d10570ae5364036104c7ec2ce3ae84acfed3f9e8ae8d4b2c0215",
                        "expanded_size": 96709149,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# JM Robotics, JM-Connect Extension.\n\nThis extension is for connecting your ROV to the JM Connect Ecosystem.\nIt also allows controlling focus-level of JM Robotics focus-cameras. \n\nIn addition you can stream audio from the rpi's camera at http://<rov-ip>:8137 (beta)\n\n",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.0.9",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.1.0": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "eaeca9bf-4fdd-5338-b35c-df1cc1255a46",
                "images": [
                    {
                        "digest": "sha256:541ec3d6cdba151cdb6498ef8f1af4af800d9ecccc8563eedd96d539a1c29157",
                        "expanded_size": 96709262,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# JM Robotics, JM-Connect Extension.\n\nThis extension is for connecting your ROV to the JM Connect Ecosystem.\nIt also allows controlling focus-level of JM Robotics focus-cameras. \n\nIn addition you can stream audio from the rpi's camera at http://<rov-ip>:8137 (beta)\n\n",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.1.0",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.1.1": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "42117cfd-19c3-5487-8c86-0c64ac5904a8",
                "images": [
                    {
                        "digest": "sha256:93eae4b370102f9b40f1df916e30e29f62ece3a6bfd0d9f30a229f00c65f1fe3",
                        "expanded_size": 97327764,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# JM Robotics, JM-Connect Extension.\n\nThis extension is for connecting your ROV to the JM Connect Ecosystem.\nIt also allows controlling focus-level of JM Robotics focus-cameras. \n\nIn addition you can stream audio from the rpi's camera at http://<rov-ip>:8137 (beta)\n\n",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.1.1",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.1.2": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "2104939c-c7c6-52a3-82b0-0c7834424a34",
                "images": [
                    {
                        "digest": "sha256:2249b4f0a6f10851cd51ce43b9323afe9cfe3c9ff759d9c035815a861d14aea0",
                        "expanded_size": 136201023,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config",
                            "/var/run/docker.sock:/var/run/docker.sock"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# JM Robotics, JM-Connect Extension.\n\nThis extension is for connecting your ROV to the JM Connect Ecosystem.\nIt also allows controlling focus-level of JM Robotics focus-cameras. \n\nIn addition you can stream audio from the rpi's camera at http://<rov-ip>:8137 (beta)\n\n",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.1.2",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.1.3": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "fbc14f43-9f80-5186-9066-a2c52764f83d",
                "images": [
                    {
                        "digest": "sha256:198a4b4657e5c37caf15757ce6670877cc040f498d9704b79fde54711b50f4de",
                        "expanded_size": 136206392,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config",
                            "/var/run/docker.sock:/var/run/docker.sock"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# JM Robotics, JM-Connect Extension.\n\nThis extension is for connecting your ROV to the JM Connect Ecosystem.\nIt also allows controlling focus-level of JM Robotics focus-cameras. \n\nIn addition you can stream audio from the rpi's camera at http://<rov-ip>:8137 (beta)\n\n",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.1.3",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.1.4": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "9e541814-e629-5f4a-8694-cbbc0cf59a34",
                "images": [
                    {
                        "digest": "sha256:4461f49763ed0adb0881470d76cc821acf0a7ededd41c97806bf1430a2e8cad6",
                        "expanded_size": 136206402,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config",
                            "/var/run/docker.sock:/var/run/docker.sock"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# JM Robotics, JM-Connect Extension.\n\nThis extension is for connecting your ROV to the JM Connect Ecosystem.\nIt also allows controlling focus-level of JM Robotics focus-cameras. \n\nIn addition you can stream audio from the rpi's camera at http://<rov-ip>:8137 (beta)\n\n",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.1.4",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            },
            "0.1.5": {
                "authors": [
                    {
                        "email": "mads@jmrobotics.no",
                        "name": "Mads Peter Hammer Strand"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@jmrobotics.no",
                    "name": "JM Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "daf1d7e7-6dc5-5812-b6fe-67232ff1b411",
                "images": [
                    {
                        "digest": "sha256:002194270ed9fbbe8cac68fa8c7d66e65e96bf5f0ca882afc1c739c4bedba43c",
                        "expanded_size": 136304617,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "Env": [
                        "SERVER_URL=https://software.jmrobotics.no/server/",
                        "I2CBUS=6",
                        "ROV_ID=<rov_id>"
                    ],
                    "ExposedPorts": {
                        "1337/tcp": {},
                        "1338/tcp": {},
                        "8137/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/jm:/root/.config",
                            "/var/run/docker.sock:/var/run/docker.sock"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "1337/tcp": [
                                {
                                    "HostPort": "1337"
                                }
                            ],
                            "1338/tcp": [
                                {
                                    "HostPort": "1338"
                                }
                            ],
                            "8137/tcp": [
                                {
                                    "HostPort": "8137"
                                }
                            ]
                        },
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# JM Robotics, JM-Connect Extension.\n\nThis extension is for connecting your ROV to the JM Connect Ecosystem.\nIt also allows controlling focus-level of JM Robotics focus-cameras. \n\nIn addition you can stream audio from the rpi's camera at http://<rov-ip>:8137 (beta)\n\n",
                "requirements": "core >= 1",
                "support": "https://www.jmrobotics.no",
                "tag": "0.1.5",
                "type": "other",
                "website": "https://www.jmrobotics.no"
            }
        },
        "website": "https://www.jmrobotics.no"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/bluerobotics/company_logo.png",
        "description": "Blue Robotics' next generation control interface; under development",
        "docker": "bluerobotics/cockpit",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/bluerobotics/cockpit/extension_logo.png",
        "identifier": "bluerobotics.cockpit",
        "name": "Cockpit",
        "versions": {
            "v0.16.1": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "bc08ab4b-a3c0-50ee-988f-020b111fef24",
                "images": [
                    {
                        "digest": "sha256:956577cd11744766acc845504c83c39aeeae35747e9be79a715f75eb7df132de",
                        "expanded_size": 12882440,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:4e2000d0ec7d3a031093fcab26781affc338dac58ec4a1a4ee0159678f8e462c",
                        "expanded_size": 12441835,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:9a8d98a9a5c711f69026a98bcc888f2f878d0469d3bc37a9bfed50ce6e915e2e",
                        "expanded_size": 12779191,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v0.16.1",
                "type": "other",
                "website": null
            },
            "v0.16.2": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "96cceb9e-af1d-5a30-b36c-857a0fa5f6d0",
                "images": [
                    {
                        "digest": "sha256:b2459c75d521154ee9e11b27bcc5a569a4ccbd9ddd83c93fd66a6dbd52b56a5a",
                        "expanded_size": 12879818,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:c36509963cc8a988f941ee47c705ad956386076a37d38adf3e9d4feb18a65321",
                        "expanded_size": 12439212,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:f60a4fea7a512dbbc357f8a630dcead3f3efd1ee40deb2e523ac1ea423864740",
                        "expanded_size": 12776569,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v0.16.2",
                "type": "other",
                "website": null
            },
            "v0.16.3": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "0e828686-ede3-5413-ab42-61dc69e3c319",
                "images": [
                    {
                        "digest": "sha256:ee47730a16a0c6c439312985acaeb85855fde1577f46b41783f0475553b01e9f",
                        "expanded_size": 12882509,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:9e3b7dce3f6113f3c9c93e41c641eb9274a88c460e3a8fd2fe69685f197adfcb",
                        "expanded_size": 12441878,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v0.16.3",
                "type": "other",
                "website": null
            },
            "v0.16.4": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "04ab7c8f-9c6f-5a5d-a39e-cf174bc36344",
                "images": [
                    {
                        "digest": "sha256:127a0f67416c41ab5b23b33ca044d1e99403b5ec567b8e613e4d1ace96f15f00",
                        "expanded_size": 12879913,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:26a17b55f44cbec58a16ad4dab967cedb209c5df84f83347f78c0ab7e54a7d62",
                        "expanded_size": 12439277,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v0.16.4",
                "type": "other",
                "website": null
            },
            "v0.17.0": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "b0c47531-2ab3-5386-a489-1b7b6c55de14",
                "images": [
                    {
                        "digest": "sha256:bbe7838bbc614d24f684154dddc1562c6635cfc25025dfb86c83b8a276e5a67a",
                        "expanded_size": 12445642,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:5e243cade76583ca807fb98ba72f3a7302d1f2e9bc8fa2e8e5ba5b95163dd4ed",
                        "expanded_size": 12886257,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v0.17.0",
                "type": "other",
                "website": null
            },
            "v0.18.0": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "a1dc39fb-250f-598e-af5a-8a204ad0b107",
                "images": [
                    {
                        "digest": "sha256:65afb5347bcc63add1d6b8e64b42d33ef7d800022b001ecaeecdadd6257c288c",
                        "expanded_size": 12445624,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v0.18.0",
                "type": "other",
                "website": null
            },
            "v0.18.1": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "ac99f9c9-b59a-5c3a-bab3-d51ae4f7d16c",
                "images": [
                    {
                        "digest": "sha256:8943b7c0ef180ddadfd7d6539e58f1c8b5aa7e661f7eba82b750582222d8fe36",
                        "expanded_size": 12445663,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v0.18.1",
                "type": "other",
                "website": null
            },
            "v0.18.2": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "adf8c349-dea5-59d1-b960-f79a26882559",
                "images": [
                    {
                        "digest": "sha256:5d453d8dac05c8bba80811acf803cdcf8334add32198d270f6e23b781aa4bdfa",
                        "expanded_size": 12446334,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:40aa394762dc0d5ad020dbac778f3abe3100dc69f95ab4a26721b041881adaf9",
                        "expanded_size": 12886966,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v0.18.2",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.1": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "49610330-7739-5e30-b51c-2bd6b80b36fc",
                "images": [
                    {
                        "digest": "sha256:3eb6c817a8aa0536b29b67e06578538f0c51d9c1cdd4e926390e726245296cde",
                        "expanded_size": 12445691,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:5b8349937f2f018a0b43e3c78fff1e6d461d11a01b7833a1470bde18b55b3aea",
                        "expanded_size": 12783049,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:9df337791ba444253eafd88b701f8b5756896ae7fc9b167cbc2812bcdb85f2fe",
                        "expanded_size": 12886304,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.1",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.10": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "5413b9f9-2fa9-5ed0-a656-bb8cd3536b9b",
                "images": [
                    {
                        "digest": "sha256:8bea448f2cea2512b96b3e71c6a641b6a4eae9df81772b68d29640c9bb31b8de",
                        "expanded_size": 13783998,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:0f892f0e3906a8486bf743233b8a056df2f18afa07a59fa125e349f1ca074747",
                        "expanded_size": 13823538,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.10",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.11": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "ec8d7f8b-0b0f-5005-9852-7da496cd5786",
                "images": [
                    {
                        "digest": "sha256:4cc76dda3b08ea31f1f53944c6e45d9a1b7ce5d7d6c961bfdd9eb6d6b37e7f9a",
                        "expanded_size": 13785811,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.11",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.12": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "2dd50e51-2f3c-552b-8e1f-c85a524ca7cb",
                "images": [
                    {
                        "digest": "sha256:ac0f19bc304990816ebacd561d9b07baa797ca2ef64faa24a7f3843bc00d13d9",
                        "expanded_size": 13792434,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:c7030a3ae068ca9e4116ec5d8a266d13556271e907806b183a124ad7abdf6efa",
                        "expanded_size": 13831994,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.12",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.13": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "48b94329-b61c-5daa-9b62-45fb01a4157c",
                "images": [
                    {
                        "digest": "sha256:3d73bdb4dc25115719f74067678530034fe48944097f3f86457eb26108e37fa1",
                        "expanded_size": 13824987,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:300df6a7226a6c0ece286bff1ee334eff62465538ee17d922f6383afd5b997d3",
                        "expanded_size": 13864533,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:7deb8669f07fe8365d32a969d249094b6a860c8eaf7d1c6931e74ef0d42ff257",
                        "expanded_size": 13953728,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.13",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.14": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "05914529-1bd8-5334-8302-7681768f017e",
                "images": [
                    {
                        "digest": "sha256:b492a88758ec5c68bf34229ed769a5bc69e1bc62a7f8568e7fe8a0d843f56c60",
                        "expanded_size": 14606997,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:98e6a964eada966421abb7b1f5f8e7d2544943ebd6fab900b2a8be23bf804a96",
                        "expanded_size": 14819085,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:8aa06572b20c18da52fe51e28519ef0de5246083db66e28f8245c58cd0d327e8",
                        "expanded_size": 14863090,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.14",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.15": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "c4d5d465-fa5d-56ef-be9e-03c2cddbeb74",
                "images": [
                    {
                        "digest": "sha256:2d411e8d83f3e1921b429166c1b160c9813a7591d3cfded3a8330255fb651959",
                        "expanded_size": 14606235,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:2518c72e3f4fab12cef9d223386823fbe84c32445758414d62037ffcfeb3fc54",
                        "expanded_size": 14818336,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:431e2ea212e30a2f549633e5b840fdce27034a1817a97de62ebcce2bdf899877",
                        "expanded_size": 14862357,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.15",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.16": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "c46818b7-e9e0-57a5-8957-7a2368fb7ef2",
                "images": [
                    {
                        "digest": "sha256:683bf0af571dc98c84af7a722447a3b1afc3e97a808a8295ac5f6c45fe07e2bf",
                        "expanded_size": 14606254,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:fb41f3cf3cec98b01e938578ff471777b6d70d5d54fe59fab186abe48aa67123",
                        "expanded_size": 14818355,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:c9f489fac4fe5a452ce934d38200dd58a6b7be1636544128426f691188ae7294",
                        "expanded_size": 14862351,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.16",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.2": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "29d51813-1c06-5806-8f6c-ba2d92024994",
                "images": [
                    {
                        "digest": "sha256:283ff9b0d19c35d73b221dcd2284555a7ce7ee0c34bb04f9bb7a6978e90df550",
                        "expanded_size": 12492632,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:f904553d67ba5fa9f4ecb899dd71a5346a9cca4921d18050bfcff0fc54b3b519",
                        "expanded_size": 12933238,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.2",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.3": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "a8a0fc96-ed4a-5e9b-93ef-5b355450fee3",
                "images": [
                    {
                        "digest": "sha256:1da3ab5cf742728b3a2b4d75b2ae1d0776fbb1cc848d08a3851a42d99494ac7b",
                        "expanded_size": 12491518,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:746670c84a4055c3336b7840f8cc956cb94ff82de5bb939e1719eb88c2010a30",
                        "expanded_size": 12828877,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:33bafc343fa8f93373e323ecb22e6207299c472399f5d9052975ef2c06144dde",
                        "expanded_size": 12932157,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.3",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.4": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "e0a24959-f811-520a-8b49-94aa3f96f963",
                "images": [
                    {
                        "digest": "sha256:847b44ead971ab57cf1614597b6c5b56a00376f5ebc64ef280eac938aeb1947b",
                        "expanded_size": 12492152,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:edbb03b015636c846fafaee3fcf07b146e19cc3d920320a40a8147697491dcc2",
                        "expanded_size": 12829498,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.4",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.5": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "3c376a78-ad61-562c-a79a-1c76dbdb7832",
                "images": [
                    {
                        "digest": "sha256:30d9e3c0c53b55b2514b24a314b16b4da139ce282cc827bf6931d14d14e525e1",
                        "expanded_size": 12492148,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:6f537919295007fac6c7705500ea52f05e25a58888d2ed52bff37a1129d21a89",
                        "expanded_size": 12829506,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.5",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.6": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "ae571bf1-af4d-53a2-9010-c9deab40639f",
                "images": [
                    {
                        "digest": "sha256:3fcdc56b311c1bc03201a2e39156a95449474516d483d16d419e4a8ca026a9d4",
                        "expanded_size": 12503364,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:0afef5ac70baf096d4f05f9adf4aac68015d4d85b03a60940415c0fb5e0177fb",
                        "expanded_size": 12840728,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.6",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.7": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "229cbf3f-8010-550b-9b25-3e356a0a9c35",
                "images": [
                    {
                        "digest": "sha256:2aa3c3d0560b14003fb3752e2c84d30898a066876af19067333c3d6cb650efd1",
                        "expanded_size": 12517490,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:ae45f97aa0d7fe6c57bed8eb57e19539a8161f1d341a2fcf0f29e3aac8a8281e",
                        "expanded_size": 12854834,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.7",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.8": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "1cfde611-7f6e-5670-acc8-045a09608c0a",
                "images": [
                    {
                        "digest": "sha256:db32e3c0f690375837db0c38743bcc202e5dc56a5886585a6db5c3cc0a9d50a8",
                        "expanded_size": 12559794,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:830999f377e95a8114793f41fd5ec6099d76744e6cce2aed36a88af05fedec5a",
                        "expanded_size": 12897150,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:0079d3999c2c5893c7c7121b8b436d2dabcba106e9a6e9374c6cccfe755bd5b0",
                        "expanded_size": 13000413,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.8",
                "type": "other",
                "website": null
            },
            "v1.0.0-beta.9": {
                "authors": [
                    {
                        "email": "rafael@bluerobotics.com",
                        "name": "Rafael Araujo Lehmkuhl"
                    },
                    {
                        "email": "patrick@bluerobotics.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "vehicle-control",
                    "control-station",
                    "ground-station",
                    "navigation",
                    "joystick",
                    "mission-planning"
                ],
                "identifier": "edb310d9-164a-5e82-9902-7001506c58d9",
                "images": [
                    {
                        "digest": "sha256:2a20c39fed8b7f9ca0f67d29cff774fd87e08a9fcbcf5508a6484149abfd68f8",
                        "expanded_size": 13781349,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": null,
                "requirements": null,
                "support": "https://discuss.bluerobotics.com/c/bluerobotics-software",
                "tag": "v1.0.0-beta.9",
                "type": "other",
                "website": null
            }
        },
        "website": "https://github.com/bluerobotics/cockpit"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/bluerobotics/company_logo.png",
        "description": "Calibrate offset on BlueBoat for improved measurements",
        "docker": "rjehangir/blueos-ps-calibration",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/bluerobotics/power-switch-calibration/extension_logo.png",
        "identifier": "bluerobotics.power-switch-calibration",
        "name": "PowerSwitch Calibration",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "rusty@bluerobotics.com",
                        "name": "Rustom Jehangir"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "bcc4553d-e923-5310-93d0-4a775fe22322",
                "images": [
                    {
                        "digest": "sha256:e542fdb888f196961b5cb710cbada54be76cfff90b16eb8e73a434f34abf672f",
                        "expanded_size": 7915983,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# BlueOS Power Switch Calibration Extension\n\nThis extension provides a simple routine to calibrate the offset of the \"Power Switch\" used in the BlueBoat to provide a more accurate current and power measurement.\n\n## Build\nExecute the following command to build your extension:\n\n   ```shell\n   docker buildx build --platform linux/arm/v7 . -t my_docker_user/blueos-ps-calibration:latest --output type=registry\n    ```\n",
                "requirements": null,
                "support": null,
                "tag": "v1.0.0",
                "type": "device-integration",
                "website": null
            }
        },
        "website": "https://github.com/rjehangir/BlueOS-PS-Calibration/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/bluerobotics/company_logo.png",
        "description": "Enables ROV position holding and navigation",
        "docker": "bluerobotics/blueos-water-linked-dvl",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/bluerobotics/water-linked-dvl/extension_logo.png",
        "identifier": "bluerobotics.water-linked-dvl",
        "name": "Water Linked DVL",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "a12a3bf4-23fa-54be-b7af-d4b1598c8246",
                "images": [
                    {
                        "digest": "sha256:e3e67687861b5d8c4613e35fafe4f13498c9906e6553125b032f6f6ddf075944",
                        "expanded_size": 78926907,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS-Water-Linked-DVL\n\nThis is a docker implementation of a Waterlinked DVL-a50 driver for the new Blue Robotics BlueOS.\n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/blueos:/root/.config --name=BlueOS-Water-Linked-DVL --restart=unless-stopped bluerobotics/blueos-water-linked-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": "core >  1",
                "support": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "98ed5b74-52a3-57e1-a100-cbeb698c5498",
                "images": [
                    {
                        "digest": "sha256:96cfe2f9ecd1cdece9cdc82f7ea24121c7a56beb4e02d502ecc6b71dca9a1cce",
                        "expanded_size": 78944496,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS-Water-Linked-DVL\n\n## Changelog\n\n### v1.0.1\n - Fixed an issue where the driver was sending Rangefinder messages with invalid data\n\nThis is a docker implementation of a Waterlinked DVL-a50 driver for the new Blue Robotics BlueOS.\n\nTo set this up, ssh into the Raspberry Pi (or access via `red-pill` in [BlueOS Terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)) and run\n\n`sudo docker run -d --net=host -v /root/.config/blueos:/root/.config --name=BlueOS-Water-Linked-DVL --restart=unless-stopped bluerobotics/blueos-water-linked-dvl:latest\n`\n\nThe service will show in the \"Available Services\" section in BlueOS, where there are some configuration options.\n",
                "requirements": "core >  1",
                "support": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL",
                "tag": "v1.0.1",
                "type": "other",
                "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL"
            },
            "v1.0.2": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "a5416f70-61fe-5098-930b-6fce0d2c0bf4",
                "images": [
                    {
                        "digest": "sha256:2f52eb554ba188b329ad06f5167927c54fa773cb33beb6f78a1d2bb3ab991395",
                        "expanded_size": 78844216,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:1e8607b8ea94b70337ada4b84941aa38fcccb06b0c630122d07c2dc66e64630d",
                        "expanded_size": 72588503,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS-Water-Linked-DVL\n\n## Changelog\n\n### v1.0.2\n - Improved style\n\n### v1.0.1\n - Fixed an issue where the driver was sending Rangefinder messages with invalid data\n\nThis is a docker implementation of a Waterlinked DVL A50 driver as a BlueOS Extension.\n\n## Install\n\nInstall it from [BlueOS extensions tab](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.1/extensions/).\n\nThe service will show in the \"Extension Manager\" section in BlueOS, where there are some configuration options.\n",
                "requirements": "core >  1",
                "support": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL",
                "tag": "v1.0.2",
                "type": "other",
                "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL"
            },
            "v1.0.3": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "doppler-velocity-log"
                ],
                "identifier": "a6397468-59fb-5808-9706-ea15c6948122",
                "images": [
                    {
                        "digest": "sha256:18c4bf17906b278c44e840b40f8561928283ea151f48958ef42dd8ee0d95eb48",
                        "expanded_size": 71173047,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "9001/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "PortBindings": {
                            "9001/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# BlueOS-Water-Linked-DVL\n\n## Changelog\n\n### v1.0.3\n - Uses an random available port instead of 9001 to avoid conflict\n - Updated menu icon\n\n### v1.0.2\n - Improved style\n\n### v1.0.1\n - Fixed an issue where the driver was sending Rangefinder messages with invalid data\n\nThis is a docker implementation of a Waterlinked DVL A50 driver as a BlueOS Extension.\n\n## Install\n\nInstall it from [BlueOS extensions tab](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.1/extensions/).\n\nThe service will show in the \"Extension Manager\" section in BlueOS, where there are some configuration options.\n",
                "requirements": "core >= 1.1",
                "support": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL/issues",
                "tag": "v1.0.3",
                "type": "device-integration",
                "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL"
            },
            "v1.0.4": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "doppler-velocity-log"
                ],
                "identifier": "d28a5218-620a-58c3-8468-46a878b2260a",
                "images": [
                    {
                        "digest": "sha256:f8ee948cb512af09d2cab3cc92cc39de0bc802645f382033ba7c5d5972f7c541",
                        "expanded_size": 71246910,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "9001/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "9001/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# BlueOS-Water-Linked-DVL\n\n## Changelog\n\n### v1.0.4\n - Fix issue introduced in v1.0.3 where the extension was unable to talk to Cable-guy\n\n### v1.0.3\n - Uses an random available port instead of 9001 to avoid conflict\n - Updated menu icon\n\n### v1.0.2\n - Improved style\n\n### v1.0.1\n - Fixed an issue where the driver was sending Rangefinder messages with invalid data\n\nThis is a docker implementation of a Waterlinked DVL A50 driver as a BlueOS Extension.\n\n## Install\n\nInstall it from [BlueOS extensions tab](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.1/extensions/).\n\nThe service will show in the \"Extension Manager\" section in BlueOS, where there are some configuration options.\n",
                "requirements": "core >= 1.1",
                "support": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL/issues",
                "tag": "v1.0.4",
                "type": "device-integration",
                "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL"
            },
            "v1.0.5": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "doppler-velocity-log"
                ],
                "identifier": "d4a8e194-7374-5f38-9e6b-05d689366907",
                "images": [
                    {
                        "digest": "sha256:7af61750294fa6eb726e73f855d6ec207ba7bf2c0af1e1ac9626c9e29b54a924",
                        "expanded_size": 71286141,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:8d1f4ea8c26a0fc7614c51f890e4cfd8c10cb66254b5c83b03278985b310b5bf",
                        "expanded_size": 75850736,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:6a05bce7c3834c01e2014db273c45e29fa0de985ec5091553f3f4c59d305da62",
                        "expanded_size": 77417461,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "9001/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "9001/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# BlueOS-Water-Linked-DVL\n\n## Changelog\n\n### v1.0.5\n - Update texts to make support of DVL A125 obvious\n\n### v1.0.4\n - Fix issue introduced in v1.0.3 where the extension was unable to talk to Cable-guy\n\n### v1.0.3\n - Uses an random available port instead of 9001 to avoid conflict\n - Updated menu icon\n\n### v1.0.2\n - Improved style\n\n### v1.0.1\n - Fixed an issue where the driver was sending Rangefinder messages with invalid data\n\nThis is a docker implementation of a Water Linked DVL A50 and A125 driver as a BlueOS Extension.\n\n## Install\n\nInstall it from [BlueOS extensions tab](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.1/extensions/).\n\nThe service will show in the \"Extension Manager\" section in BlueOS, where there are some configuration options.\n",
                "requirements": "core >= 1.1",
                "support": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL/issues",
                "tag": "v1.0.5",
                "type": "device-integration",
                "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL"
            }
        },
        "website": "https://github.com/bluerobotics/BlueOS-Water-Linked-DVL/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/nortekgroup/company_logo.png",
        "description": "Supports the Nucleus1000 DVL for ROV navigation",
        "docker": "nortekgroup/blueos_nucleus",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/nortekgroup/company_logo.png",
        "identifier": "nortekgroup.nucleus",
        "name": "Nortek Nucleus",
        "versions": {
            "0.0.6": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "27443a12-b946-5860-a163-1747f31fc434",
                "images": [
                    {
                        "digest": "sha256:ea7125f465fbb327c4b7d20debe40491de00e448c9750b31497388bac2c776b4",
                        "expanded_size": 66433573,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "0.0.6",
                "type": "other",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            },
            "0.0.7": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "a2f79df4-7b59-549a-8d5e-7bcf276d92f1",
                "images": [
                    {
                        "digest": "sha256:3c2863d40a1fb24a52bee3a121066c066ce4dea188bcf34f57d703604b4ef67d",
                        "expanded_size": 67134007,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "0.0.7",
                "type": "other",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            },
            "0.0.8": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "c6069a89-a287-5ab5-a68e-4a8b83d48d04",
                "images": [
                    {
                        "digest": "sha256:f435a931ca002a48fac05f49210a5fde5f4149230f0cc28eaa6620d07c783d02",
                        "expanded_size": 67134028,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "0.0.8",
                "type": "other",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            },
            "1.0.0": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "36b22160-b9ae-5dd7-813c-af6e0654135a",
                "images": [
                    {
                        "digest": "sha256:27ce7b6d54144a21ffc977980db8cab5449ea187d7a547730435ff33e81410ee",
                        "expanded_size": 67134035,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "1.0.0",
                "type": "other",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            },
            "1.0.1": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "doppler-velocity-log",
                    "water-tracking",
                    "current-profiling"
                ],
                "identifier": "45bcca1a-93dc-5556-885e-70cf737f4c66",
                "images": [
                    {
                        "digest": "sha256:6ca7ff490e0537ea5b733e17f2cde35ab9df44ce623873e7524424d83f8c3bbc",
                        "expanded_size": 67134167,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "1.0.1",
                "type": "device-integration",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            },
            "1.0.2": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "doppler-velocity-log",
                    "water-tracking",
                    "current-profiling"
                ],
                "identifier": "db710a2e-7da6-51a6-b5a7-b89187e26d9d",
                "images": [
                    {
                        "digest": "sha256:8d96a946443c05c829d07953772cd0c53ee88120455449768796ee133c38f679",
                        "expanded_size": 67163850,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "1.0.2",
                "type": "device-integration",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            },
            "1.0.4": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "doppler-velocity-log",
                    "water-tracking",
                    "current-profiling"
                ],
                "identifier": "d80dda53-9e55-5730-8db0-5fb11b255c4d",
                "images": [
                    {
                        "digest": "sha256:737d0121074d2009aec5e835884197efa32d063779f1417d981c41e3c351cbec",
                        "expanded_size": 67188902,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "1.0.4",
                "type": "device-integration",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            },
            "1.1.0": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "doppler-velocity-log",
                    "water-tracking",
                    "current-profiling"
                ],
                "identifier": "1311ade4-1008-5502-84b3-c592f1aeb0fc",
                "images": [
                    {
                        "digest": "sha256:e0dedf493f9749aa953b59d4941e1fdf254c4a6949ecee933079e1d203e71773",
                        "expanded_size": 67100057,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "1.1.0",
                "type": "device-integration",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            },
            "1.2.0": {
                "authors": [
                    {
                        "email": "martin.johansen@nortekgroup.com",
                        "name": "Martin Bergene Johansen"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "",
                    "name": "Nortek"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "positioning",
                    "navigation",
                    "doppler-velocity-log",
                    "water-tracking",
                    "current-profiling"
                ],
                "identifier": "5279391c-d9e5-5ac9-a901-96de644f637c",
                "images": [
                    {
                        "digest": "sha256:630017a74190da84b89edee200f473baf0140a80d8e7e843bab8a9178091268d",
                        "expanded_size": 67262813,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "\n# BlueOS extension\n\nThis is a Nucleus extension for the BlueOS software running on BlueROV2. \n\nIt works by wrapping the Nucleus Driver in a docker image, with a script that feeds velocity data from the Nucleus device into the ArduSub control system through mavlink commands.\n\nThis allows the user to utilize the \"position hold\" functionality in the ROV\n\n## Nortek Nucleus integration\n\nTo mount the Nucleus unto the BlueROV2 and connect it to its network, refer Nortek's [Nucleus integration guide](https://support.nortekgroup.com/hc/en-us/articles/8246995934748-Nucleus-integration-with-BlueROV2).\n\n## setup\n\n### BlueOS\n\nBlueOS needs to be of version 1.1.0-beta18 or newer in order to support the adding of third party extensions.\n\n### ArduSub\n\nArduSub needs to be of version 4.1.0 or newer for it to support the VISUAL_POSITION_DELTA packets used to send velocity data to the ROV.\n\n### Nucleus\n\nThis extension assumes that the Nucleus is connected to the network of the ROV through an ethernet connection. It is therefore necessary to set a static IP in the Nucleus.\n\nThe network prefix of the BlueROV2 is 192.168.2.0, with a netmask of 255.255.255.0. The Nucleus' static IP must therefore be set to a fitting value, i.e. 192.168.2.201. \n\nIn the GUI that comes with the extension the user must specify this IP address to establish a connection with the Nucleus device. The user is therefore not limited to using this IP address, but is at the same time responsible of selecting an IP address that is not already in use on the network.\n\n## Adding extension to BlueROV2\n\nThe extension can be added to the BlueROV2 either through the BlueOS software, or by creating the docker image on the onboard computer and running the docker container directly.\n\nIt is recommended to add the extension through BlueOS as it is both easier and the intended way for this extension to be added. The two different approaches are covered in the following subsections.\n\n### BlueOS\n\n#### Installation\nThe extension can be added through BlueOS' extensions menu.\n\nNavigate to Extensions > Extensions Manager.\n\n![blueos_menu](docs/blueos_menu.png)\n\nLocate Nortek Nucleus under the tab \"STORE\" and open it.\n\n![nortek_nucleus_store](docs/nortek_nucleus_store.png)\n\nWhen the Nortek Nucleus extension is opened the user will be presented with this README, as well as information about the extensions creator, a link to this github repository, the settings in the docker image of the extension and the option of installing the extension.\n\nTo install the extension, select the newest available version in the drop down menu (the newest version should be the default) and push install. BlueOS will the pull the nucleus extension docker image and install it in its extensions.\n\n![nortek_nucleus_install](docs/nortek_nucleus_install.png)\n\n#### Usage\n\nAfter the installation has been completed. The extension can be located in Extensions > Extensions Manager, under the tab \"INSTALLED\".\n\n![nortek_nucleus_installed](docs/nortek_nucleus_installed.png)\n\nHere the user have the option to edit sittings, uninstall, disable and restart the extension. It is also possible to view the output logs from the docker container that runs the extension which can serve as a good debugging tool.\n\nThe extension itself can be opened in the menu by navigating to Extensions > Nucleus: Position hold. \n\n![blueos_menu_nucleus](docs/blueos_menu_nucleus.png)\n\nOpening this will present the user with the GUI for the Nucleus extension which is covered in [Using the extension](#using-the-extension)\n\n### Docker\n\nTo set this extension up manually, ssh into the Raspberry Pi on the BlueROV2 (or access via red-pill in [BlueOS terminal](https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.0/advanced-usage/#terminal)).\n\n**N.B.** The docker image available on dockerhub is set to use port 80 for its user interface which allows BlueOS to handle which port this user interface should be available at. For the manual approach it is therefore necessary to build the docker image with a different port if you wish to have access to the user interface.\n\n**N.B.** In the current version of the extension it is necessary to have access to the GUI as it is required for establishing the connection to the Nucleus.\n\nOn the onboard computer, clone this repo in your preferred path with the following command:\n\n```\ngit clone git@github.com:nortekgroup/nucleus_driver.git\n```\n\nNavigate to the blueos_extension folder (the folder containing the Dockerfile) and build the docker image with the following command:\n\n```\ndocker build . -t nucleus_driver\n```\n\nThe GUI of the extension is by default on port 5000. \n\nIf another port is preferred for the GUI the image can be build with the preferred port as an argument with the following command\n\n```\ndocker build . -t nucleus_driver --build-arg PORT=5000\n```\n\nwith the value following \"`PORT=`\" being your preferred port.\n\nThe docker container can be executed with the following command\n\n```\ndocker run --net=host -v /root/.config/blueos:/root/.config --name=nucleus_driver --restart=unless-stopped nucleus_driver\n```\n\n`--net=host` allows the container to share the network of the ROV which is necessary for it to communicate with the ROV and make the GUI available\n\n`-v /root/.config/blueos:/root/.config` maps the volume \"/root/.config/blueos\" from the Raspberry Pi into \"/root/.config\" in the container. This allows the container the store configuration data in-between runs.\n\n`--name=Nucleus-Driver` is the preferred name of the container.\n\n`--restart=unless-stopped` allows the extension to automatically start when the ROV is powered up\n\nWith the docker container running, the GUI can be accessed in a browser by navigating to `blueos.local:<port>` (or `192.168.2.2:<port>`), where `<port>` is the specified port from the image creation. See [Using the extension](#using-the-extension) to learn about how to use the GUI.\n\n## Using the extension\n\n**N.B.** In order for the extension to work it is necessary to change certain controller parameters. Refer to \"Controller parameters\" section for more info\n\n**N.B.** In order for the \"position hold\" algorithm to perform well it might be necessary to change the ROV's PID parameters. Refer to \"PID parameters\" section for more info\n\nWith the extension added, its user interface (GUI) can be found by navigating to Extensions -> Nucleus: Position hold in the BlueOS menu.\n\nIn the case of a manual installation through docker, the GUI can be found y navigating to `blueos.local:<port>` where `<port>` is he port specified when the docker image was created. \n\nThe GUI presents the user with a home page and two pages for parametrization. These pages can be navigated in-between using the navigation banner at the top of the GUI\n\n### Home\n\nThe home screen presents the user with a status field which displays the results of various checks performed during the startup of the ROV. It is necessary for all of these checks to pass in order for extension to work. Some easy troubleshooting is presented in the home screen in case any of these checks were to fail\n\nThe Nucleus hostname field is used to set the IP address used to connect to the Nucleus device. This IP address should be the same as the static IP configured on the Nucleus device.\n\nIt is also a field which allows the user to decide whether the driver is enabled. The driver must be enabled for it to feed velocity data to the ROV. If it is not enabled the driver is still running and extracting data from the Nucleus, but the velocity is not sent to the ROV.\n\nThe packet counter field displays how many velocity data packets has been handled by the extension. Sent packages refers to packages that has been sent to the ROV, Failed packets refers to packets that for some reason failed to be sent, and Skipped packets are packets that were in good condition and ready to be sent, but weren't due to the driver not being enabled.\n\n### PID parameters\n\n**N.B.** Adjusting any of these parameters **WILL** change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nThe PID parameters page gives the user opportunity to modify selected PID parameters in the controller. Good parameterization is necessary for a good performance of the ROV. The correct parameters varies from vehicle to vehicle as the physical attributes of the ROV has an impact on its behavior. However, recommended parameters for a standard BlueROV2 with only the Nucleus being the third party installation is presented on this page.\n\n### Controller parameters\n\n**N.B.** Adjusting any of these parameters may change the behavior of the ROV\n\n**N.B.** Neither the extension nor the ROV will remember the original values of these parameters in case they are changed. It is therefore the users responsibility to remember the original values in case they wish to revert back to the original parameterization.\n\nIn order for the controller to accept and utilize the velocity packets sent from the Nucleus, certain parameters has to be changed. The parameters and their required values are presented on this page. \n\nAfter these parameters has been changed it is necessary to power cycle the vehicle for these parameters to take effect\n\n",
                "requirements": null,
                "support": "https://support.nortekgroup.com/",
                "tag": "1.2.0",
                "type": "device-integration",
                "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
            }
        },
        "website": "https://github.com/nortekgroup/nucleus_driver/tree/main/blueos_extension"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/raultrombin/company_logo.png",
        "description": "Use navigator board through webservices.",
        "docker": "raulelektron/blueos_navigator_webassistant",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/raultrombin/navigator-webassistant/extension_logo.png",
        "identifier": "raultrombin.navigator-webassistant",
        "name": "Navigator WebAssistant",
        "versions": {
            "0.0.0": {
                "authors": [
                    {
                        "email": "raulvtrombin@gmail.com",
                        "name": "Raul Victor Trombin"
                    }
                ],
                "company": {
                    "about": "Control navigator hardware using webservices",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "rov",
                    "robot"
                ],
                "identifier": "11930ba8-160e-51ed-a45d-21213c9f4c20",
                "images": [
                    {
                        "digest": "sha256:397c8a86a25d57079e23afc9a1b3da8affa81e634b567058f702e902d0ede456",
                        "expanded_size": 13222204,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8080/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "8080/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS's Navigator Extension\n\nNavigator Webassistant extension is a webserver that allows user to control navigator hardware.\nThis application uses the navigator-assistant to interface with navigator board, and users can control it from Websocket and RestAPI.\n\n## Instructions\n\nAccess the extensions manager and install with the following parameters:\n\nExtensions Manager:\n```\nblueos.local/tools/extensions-manager\n```\nParameters:\n\n```\nraulelektron.blueos_navigator_webassistant\n\nNavigator Assistant\n\nlatest\n\n{\n  \"ExposedPorts\": {\n    \"8080/tcp\": {}\n  },\n  \"HostConfig\": {\n    \"Privileged\": true,\n    \"PortBindings\": {\n      \"8080/tcp\": [\n        {\n          \"HostPort\": \"\"\n        }\n      ]\n    }\n  }\n}\n```\n\nYou can also run Navigator Assistant locally or on other extensions. Please check [navigator-web-assistant].\n\nYou can also use the Jupyter extension to try some fast python and websocket applications.\n\n\n[navigator-web-assistant]: https://github.com/RaulTrombin/navigator-web-assistant",
                "requirements": null,
                "support": null,
                "tag": "0.0.0",
                "type": "education",
                "website": null
            }
        },
        "website": "https://github.com/RaulTrombin/blueos-navigator-web-assistant"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "Static HTML plus MAVLink data",
        "docker": "williangalvani/blueos-example2",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/example2/extension_logo.png",
        "identifier": "williangalvani.example2",
        "name": "Example 2",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "76dbd22b-c7a4-566e-9342-5871c558bd88",
                "images": [
                    {
                        "digest": "sha256:330ef2defbb59580f2c5324d03c968b7f43e4073c3a3cc3e4c9620d5ce9d4781",
                        "expanded_size": 47259138,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# Static Webpage extension\n\nThis uses python to serve a basic static HTML page as an extension. This example includes MAVLink2Rest communication via http\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "requirements": "core >= 1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "39888870-c652-52f0-9ead-0640b21526bc",
                "images": [
                    {
                        "digest": "sha256:49131f6972848dea860471a4215687166319a4b105422aa1dd6b75a74610d588",
                        "expanded_size": 46802665,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:0b5b5c4341d46ae89398405d5eef61fed9ed6f86923451ff0135c855f53a247a",
                        "expanded_size": 41255976,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# Static Webpage extension\n\nThis uses python to serve a basic static HTML page as an extension. This example includes MAVLink2Rest communication via http\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.1",
                "type": "example",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "website": "https://github.com/Williangalvani/BlueOS-examples/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "Basic Vuetify example",
        "docker": "williangalvani/blueos-example3",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/example3/extension_logo.png",
        "identifier": "williangalvani.example3",
        "name": "Example 3",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "e27b2b4c-10f0-5277-9045-0f1482e0a2bc",
                "images": [
                    {
                        "digest": "sha256:0d15d91d5b3612b3f6c1feda490b605ca7ef8ad16cb4dfb622eb12581d8d4b72",
                        "expanded_size": 49260395,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# Static Webpage extension\n\nThis uses python to serve a static HTML page using Vue and Vuetify as an extension.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "requirements": "core >= 1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "57e56b68-d5bf-563e-bf9b-faf46092a91d",
                "images": [
                    {
                        "digest": "sha256:6fb2d75b10ba570f679fe19d5352d6bc86ec3ddcf81d44ab62e98e48fd68fc17",
                        "expanded_size": 48803918,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:2ea73258ad7653091c56983f2b3484d3239ac1a13009cb5f8f337ba509162b29",
                        "expanded_size": 43257229,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# Static Webpage extension\n\nThis uses python to serve a static HTML page using Vue and Vuetify as an extension.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.1",
                "type": "example",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "website": "https://github.com/Williangalvani/BlueOS-examples/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "GPIO PWM Control",
        "docker": "williangalvani/blueos-example5",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/example5/extension_logo.png",
        "identifier": "williangalvani.example5",
        "name": "Example 5",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "1f032679-8e6f-5837-9743-39ff07613067",
                "images": [
                    {
                        "digest": "sha256:71889390624dbe62a6f63094ca917da18182d55235ea7804c72209b995587970",
                        "expanded_size": 66852214,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# Gpio Control Example\n\nThis uses python to serve a static HTML page using Vue and Vuetify controlling a gpio using a python backend\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`\n\nThen pull it in blueos:\n\n\n```\nred-pill\nsudo docker run -d --net=host --name=blueos-example4 --restart=unless-stopped YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest\n```",
                "requirements": "core >= 1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "interaction"
                ],
                "identifier": "aee11d25-295e-5fc7-8d75-c8cffa35172d",
                "images": [
                    {
                        "digest": "sha256:f04b7ccea49448746dd544f11e17947a153673cf5342d6c74d8f6dbbf9ceea0d",
                        "expanded_size": 80249985,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# Gpio Control Example\n\nThis uses python to serve a static HTML page using Vue and Vuetify controlling a gpio using a python backend\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`\n\nThen pull it in blueos:\n\n\n```\nred-pill\nsudo docker run -d --net=host --name=blueos-example4 --restart=unless-stopped YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest\n```",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.1",
                "type": "example",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "website": "https://github.com/Williangalvani/BlueOS-examples/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "Hello World",
        "docker": "williangalvani/blueos-example1",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/example1/extension_logo.png",
        "identifier": "williangalvani.example1",
        "name": "Example 1",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "f01e3e89-4f93-5c96-8b6a-5526699bebb1",
                "images": [
                    {
                        "digest": "sha256:97920e5f8f44d815b8b6f6f2a662e1721e902b43005dd91464c08c56b8e8c66b",
                        "expanded_size": 47258668,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# Static Webpage extension\n\nThis uses python to serve a basic static HTML page as an extension.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "requirements": "core >  1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "bf421443-99eb-57ac-8de4-190157c0c680",
                "images": [
                    {
                        "digest": "sha256:34d8e4576adb26c8db7a338b595cf01857da21c3a67f14796f0e503b4f0edfbd",
                        "expanded_size": 46802192,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:268ee547e87fc7b4c8c6dbd360a1e8a1c10228164e2458d9220b6a06155a8951",
                        "expanded_size": 41255503,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# Static Webpage extension\n\nThis uses python to serve a basic static HTML page as an extension.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.1",
                "type": "example",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "website": "https://github.com/Williangalvani/BlueOS-examples/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "Remotely access onboard USB devices over IP",
        "docker": "williangalvani/blueos-extension-virtualhere",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/virtualhere/extension_logo.png",
        "identifier": "williangalvani.virtualhere",
        "name": "VirtualHere",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "4d7a08b8-ab08-54b2-8cfb-ae1a6f2acb7b",
                "images": [
                    {
                        "digest": "sha256:b84df60bdd753d795c649f5ba2266a3394961da30a94f36a090aea5626ccda53",
                        "expanded_size": 62349790,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS VirtualHere extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\nTo use, first install it in BlueOS:\n\n\n```\nred-pill\nsudo docker run -d --net=host --privileged --name=blueos-virtualhere --restart=unless-stopped williangalvani/blueos-extension-virtualhere:latest\n```\n\n# Client\n\nDownload a client from https://www.virtualhere.com/usb_client_software",
                "requirements": "core >= 1",
                "support": "https://github.com/Williangalvani/BlueOS-VirtualHere/issues",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-VirtualHere"
            },
            "v1.0.2": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "f11b999a-862a-5908-8c10-57fe46b9d864",
                "images": [
                    {
                        "digest": "sha256:4006bc89ee6193e8f973c02858cc91c8482cab78704ea5307912f56058ab59ba",
                        "expanded_size": 62383495,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS VirtualHere extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\n# Client\n\nDownload a client from https://www.virtualhere.com/usb_client_software\n",
                "requirements": "core >= 1",
                "support": "https://github.com/Williangalvani/BlueOS-VirtualHere/issues",
                "tag": "v1.0.2",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-VirtualHere"
            },
            "v1.0.3": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "communication"
                ],
                "identifier": "166bd1cb-1e1b-56ff-a5f5-721e02b95994",
                "images": [
                    {
                        "digest": "sha256:27c382df5571e9d2338b729a022ad7c902e58267e648231eacee78d7169cfe6b",
                        "expanded_size": 61972606,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:58add8e210182fa2c96607fb8192b2dfb3f853ebe18c088b9738a50163daf041",
                        "expanded_size": 56520690,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS VirtualHere extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\n# Client\n\nDownload a client from https://www.virtualhere.com/usb_client_software\n",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-VirtualHere/issues",
                "tag": "v1.0.3",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-VirtualHere"
            }
        },
        "website": "https://github.com/Williangalvani/BlueOS-VirtualHere"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "USBIP extension for extending USB over IP",
        "docker": "williangalvani/blueos-extension-usbip",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/usbip/extension_logo.png",
        "identifier": "williangalvani.usbip",
        "name": "USBIP",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "66cc7571-3976-551f-9ccc-0159c33fab96",
                "images": [
                    {
                        "digest": "sha256:2721824e101a3d6853d17b1a743020d7048eb55677c4243293366ec4930ff7fa",
                        "expanded_size": 60460083,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# USB/IP extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\n# Client\n\n## Linux:\n\n\n```\n# load modules\nsudo modprobe usbip-core\nsudo modprobe vhci-hcd\n# list devices\nsudo usbip list --remote blueos.local\n# connect to device with bus 1-1.3\nsudo usbip attach --remote blueos.local --busid 1-1.3\n\n```\n\n## Windows\n\nDownload the 3.6 dev release from https://github.com/cezanne/usbip-win and follow the \"Client\" instructions there.\nThe new \"ude\" driver seemed to work for me.",
                "requirements": "core >  1",
                "support": "https://github.com/Williangalvani/BlueOS-UsbIp",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-UsbIp"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "communication"
                ],
                "identifier": "21940e28-c01a-5daa-836d-4d56fdbcf7d9",
                "images": [
                    {
                        "digest": "sha256:6b4d81bb368a7899b106009a3d2a717144c471dde7dfaa22e61aa4512b987887",
                        "expanded_size": 60355857,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# USB/IP extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\nTo use, first pull it in blueos:\n\n\n```\nred-pill\nsudo docker run -d --net=host --name=blueos-example1 --restart=unless-stopped williangalvani/blueos-extension-usbip:latest\n```\n\n# Client\n\n## Linux:\n\n\n```\n# load modules\nsudo modprobe usbip-core\nsudo modprobe vhci-hcd\n# list devices\nsudo usbip list --remote blueos.local\n# connect to device with bus 1-1.3\nsudo usbip attach --remote blueos.local --busid 1-1.3\n\n```\n\n## Windows\n\nDownload the 3.6 dev release from https://github.com/cezanne/usbip-win and follow the \"Client\" instructions there.\nThe new \"ude\" driver seemed to work for me.",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-UsbIp",
                "tag": "v1.0.1",
                "type": "device-integration",
                "website": "https://github.com/Williangalvani/BlueOS-UsbIp"
            },
            "v1.0.2": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "communication"
                ],
                "identifier": "0ba7d41c-99ac-5b5b-a8a5-0571103fef2b",
                "images": [
                    {
                        "digest": "sha256:71bd46130f38fea1c6d6c7d91104100c760a5f254689c4f329fa1731b136990d",
                        "expanded_size": 46300676,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# USB/IP extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\n\n# Client\n\n## Linux:\n\n\n```\n# load modules\nsudo modprobe usbip-core\nsudo modprobe vhci-hcd\n# list devices\nsudo usbip list --remote blueos.local\n# connect to device with bus 1-1.3\nsudo usbip attach --remote blueos.local --busid 1-1.3\n\n```\n\n## Windows\n\nDownload the 3.6 dev release from https://github.com/cezanne/usbip-win and follow the \"Client\" instructions there.\nThe new \"ude\" driver seemed to work for me.\n\n\n# Changelog:\n\n - v1.0.2:\n     - updated to use commander instead of hard-coded ID to talk to host",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-UsbIp",
                "tag": "v1.0.2",
                "type": "device-integration",
                "website": "https://github.com/Williangalvani/BlueOS-UsbIp"
            },
            "v1.0.3": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "communication"
                ],
                "identifier": "c9ab154d-70e1-5174-a91c-d8b0e84bcbc2",
                "images": [
                    {
                        "digest": "sha256:77fa8d6dc7271ea52c9b220744212c7d2c501b44053c99cf57242f915abee571",
                        "expanded_size": 46300711,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "NetworkMode": "host"
                },
                "readme": "# USB/IP extension\n\nThis exposes usb devices via IP, which can be used in another client device\n\n\n# Client\n\n## Linux:\n\n\n```\n# load modules\nsudo modprobe usbip-core\nsudo modprobe vhci-hcd\n# list devices\nsudo usbip list --remote blueos.local\n# connect to device with bus 1-1.3\nsudo usbip attach --remote blueos.local --busid 1-1.3\n\n```\n\n## Windows\n\nDownload the 3.6 dev release from https://github.com/cezanne/usbip-win and follow the \"Client\" instructions there.\nThe new \"ude\" driver seemed to work for me.\n\n\n# Changelog:\n\n - v1.0.2:\n     - updated to use commander instead of hard-coded ID to talk to host",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-UsbIp",
                "tag": "v1.0.3",
                "type": "device-integration",
                "website": "https://github.com/Williangalvani/BlueOS-UsbIp"
            }
        },
        "website": "https://github.com/Williangalvani/blueos-usbip"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "Join a virtual network to operate your vehicle from anywhere",
        "docker": "williangalvani/zerotier",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/zerotier/extension_logo.png",
        "identifier": "williangalvani.zerotier",
        "name": "ZeroTier",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "a55f32d8-739a-50b3-b8eb-e6e648c55554",
                "images": [
                    {
                        "digest": "sha256:da7a45553d91224582cfd56ead75ecdfc259e3ced1cb1c830bb044cdcc344c3c",
                        "expanded_size": 169297643,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/var/lib/zerotier-one:/var/lib/zerotier-one"
                        ],
                        "CapAdd": [
                            "SYS_ADMIN",
                            "NET_ADMIN"
                        ],
                        "Devices": [
                            {
                                "CgroupPermissions": "rwm",
                                "PathInContainer": "/dev/net/tun",
                                "PathOnHost": "/dev/net/tun"
                            }
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "This is a ZeroTier extension. It sets up a VPN to access your device from anywhere with an internet connection.\nFor more information on ZeroTier, check [ZeroTier](https://www.zerotier.com/).",
                "requirements": "core >= 1",
                "support": "https://github.com/williangalvani/zerotierone",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/williangalvani/zerotierone"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "communication"
                ],
                "identifier": "50fceca3-00cf-550d-a4b3-6fc682caefab",
                "images": [
                    {
                        "digest": "sha256:1172a08bfae4bc3fb54589d1b6abc7237a05b1a09c8a8e4bd87d2ba424e424be",
                        "expanded_size": 169429191,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/var/lib/zerotier-one:/var/lib/zerotier-one"
                        ],
                        "CapAdd": [
                            "SYS_ADMIN",
                            "NET_ADMIN"
                        ],
                        "Devices": [
                            {
                                "CgroupPermissions": "rwm",
                                "PathInContainer": "/dev/net/tun",
                                "PathOnHost": "/dev/net/tun"
                            }
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "This is a ZeroTier extension. It sets up a VPN to access your device from anywhere with an internet connection.\nFor more information on ZeroTier, check [ZeroTier](https://www.zerotier.com/).",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/zerotierone/issues",
                "tag": "v1.0.1",
                "type": "other",
                "website": "https://github.com/Williangalvani/zerotierone"
            },
            "v1.12.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "communication"
                ],
                "identifier": "2c16f342-5e57-580d-b91c-595299c4f765",
                "images": [
                    {
                        "digest": "sha256:473153de2deff0d6ebe51df9a6d86dd1b382eecf78ba8f5ecad052c12d3ad94d",
                        "expanded_size": 246398941,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/var/lib/zerotier-one:/var/lib/zerotier-one"
                        ],
                        "CapAdd": [
                            "SYS_ADMIN",
                            "NET_ADMIN"
                        ],
                        "Devices": [
                            {
                                "CgroupPermissions": "rwm",
                                "PathInContainer": "/dev/net/tun",
                                "PathOnHost": "/dev/net/tun"
                            }
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "This is a ZeroTier extension. It sets up a VPN to access your device from anywhere with an internet connection.\nFor more information on ZeroTier, check [ZeroTier](https://www.zerotier.com/).",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/zerotierone/issues",
                "tag": "v1.12.1",
                "type": "other",
                "website": "https://github.com/Williangalvani/zerotierone"
            },
            "v1.12.3": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "communication"
                ],
                "identifier": "d8da95f8-29ff-5b64-a4ac-3e4425d890f4",
                "images": [
                    {
                        "digest": "sha256:714ca73d30b033b2eb4d3f70e77cf86fa5871a4cddf5314ed435dc4b4b860ff7",
                        "expanded_size": 260334935,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/extensions/zerotier:/var/lib/zerotier-one",
                            "/var/lib/zerotier-one:/old-settings"
                        ],
                        "CapAdd": [
                            "SYS_ADMIN",
                            "NET_ADMIN"
                        ],
                        "Devices": [
                            {
                                "CgroupPermissions": "rwm",
                                "PathInContainer": "/dev/net/tun",
                                "PathOnHost": "/dev/net/tun"
                            }
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": ">**NOTE:** This is a [BlueOS Extension](https://blueos.cloud/docs/blueos/1.1/extensions/) for using the [ZeroTier](https://www.zerotier.com/) service on a BlueOS device. It sets up a VPN to access your device from anywhere with an internet connection.\n## Initial Setup\n\n1. Install [the ZeroTier extension](https://docs.bluerobotics.com/BlueOS-Extensions-Repository/#:~:text=ZeroTier,Maintainer) on your vehicle\n1. [Download ZeroTier](https://www.zerotier.com/download/) on the device(s) you want to connect with\n1. [Log In](https://my.zerotier.com/login) to ZeroTier online\n    - create an account if you haven't used ZeroTier before)\n1. Create a new network and copy the generated network ID\n1. Join the network (using the ID) from the BlueOS ZeroTier Extension page, as well as through the ZeroTier interface on your device(s)\n1. If using a private network, return to the online ZeroTier interface, scroll down to the \"Members\" section, and allow each device access to the network by checking the \"Auth?\" checkbox beside its listing\n    - For ease of future management, it may help to give meaningful names and/or descriptions to the devices in the table\n1. You should now be able to access the BlueOS web interface through the ZeroTier connection\n    - You can use the **vehicle**'s mDNS address (e.g. http://blueos.local, by default), or the **vehicle**'s \"Managed IP\" shown in ZeroTier's online interface (in the \"Members\" section)\n    - Connecting through ZeroTier requires both ends of the connection to be on the same ZeroTier network and connected to the internet\n1. Configure the desired endpoints (for MAVLink telemetry, video streams, serial, etc) to point to the intended recipient\n    - Setting up a video stream requires setting up a stream endpoint for it in the [Video Streams](https://blueos.cloud/docs/blueos/1.1/advanced-usage/#video-streams) page\n        - Creating a new stream endpoint while connected to BlueOS through the ZeroTier connection will automatically use the connected **device**'s IP address\n        - You can also get the relevant **device** IP address(es) through the ZeroTier online interface (in the \"Managed IPs\" column)\n        - BlueOS video streams can provide multiple endpoints of the same type, to send to multiple devices\n            - You can edit a stream to add more endpoints\n    - Vehicle telemetry+control through QGroundControl is generally handled via a UDP Client link set up in BlueOS's [MAVLink Endpoints](https://blueos.cloud/docs/blueos/1.1/advanced-usage/#mavlink-endpoints) page\n        - Creating a new UDP Client endpoint while connected through the ZeroTier connection will automatically use the connected **device**'s IP address\n        - You can also get the relevant **device** IP address through the ZeroTier online interface (in the \"Managed IPs\" column)\n    - It is technically also possible to set up a MAVLink connection using BlueOS's GCS Server Link, although it may be less robust\n        - Doing this requires adding a \"Comm Link\" in QGroundControl's Application Settings (instead of creating a new endpoint in BlueOS)\n            - you can add the server as the **vehicle**'s mDNS address (e.g. `blueos.local`) or the **vehicle**'s IP address, and leave the port as `14550`\n        - Make sure the GCS Server Link is enabled in BlueOS\n\n## General Usage\n\nOnce the network and endpoints have been configured it should be possible to reconnect at will, whenever the vehicle and a device are both connected to the internet, and connected to a ZeroTier network they're both authorised on.\n\nIf a device leaves a ZeroTier network (or is not connected to the internet) then it will not be accessible to the rest of the network. ZeroTier's online manager can be used to de-authorise devices and/or remove them from the network entirely.\n\n## Troubleshooting\n\n- If the ZeroTier Status is showing as `ACCESS_DENIED`, you're connected to a privately configured ZeroTier network and the network owner (likely yourself) needs to authorise your device through the \"Members\" section of ZeroTier's online interface for that network\n- If the connection is not working it can help to check the \"Last Seen\" column of the \"Members\" section of ZeroTier's online interface, to determine whether one or multiple of your devices is not currently connected to the ZeroTier network (it may be having internet connectivity issues, or may just need to connect to the network through its ZeroTier interface)\n    - If you can't find your device's ZeroTier interface, it may be an icon in your taskbar / menubar\n- Determining which device is which in ZeroTier's online interface requires knowing which order they attempted to join the network, or having access to the devices so you can identify them by disconnecting them from the network (or the internet) and seeing which one changes in the \"Last Seen\" column\n- If the connection is working but some of the endpoints aren't, make sure the endpoints are configured to use the correct IP address\n    - Something on the vehicle sending/connecting to a device (e.g. video, GCS MAVLink UDP client link for telemetry, etc) needs to be directed towards the **device**'s IP address\n    - Using a device to connect to the vehicle (e.g. to access the BlueOS web interface, or connect to a GCS server link for telemetry) needs to use the **vehicle**'s IP or mDNS address",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/zerotierone/issues",
                "tag": "v1.12.3",
                "type": "other",
                "website": "https://github.com/Williangalvani/zerotierone"
            }
        },
        "website": "https://github.com/Williangalvani/ZeroTierOne"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "BlueOS Proxy",
        "docker": "williangalvani/blueos-extension-proxy",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/blueos-proxy/extension_logo.png",
        "identifier": "williangalvani.blueos-proxy",
        "name": "BlueOS Proxy",
        "versions": {
            "v0.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "0f219efe-14c3-5232-95d5-529d5396df1c",
                "images": [
                    {
                        "digest": "sha256:5813a9a11a447009c7e3a235b2fc263e8f283d136986f5b5a091e4f9b62d2fd4",
                        "expanded_size": 80488310,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {},
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/blueos-proxy/:/usr/blueos/userdata/blueos-proxy/"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "Could not get readme https://raw.githubusercontent.com/Williangalvani/BlueOS-examples/v0.0.1/example4-vue-backend/Readme.md: status: 404: 404: Not Found",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v0.0.1",
                "type": "example",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            },
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "ecdb7a22-1823-574b-9165-0fc25d948f3b",
                "images": [
                    {
                        "digest": "sha256:2390afb49552d47ccffea8b715c7cdaa3a440daa7e544ab661b8c8483774f550",
                        "expanded_size": 80488310,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {},
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/blueos-proxy/:/usr/blueos/userdata/blueos-proxy/"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# Blueos Proxy Extension\n\nThis allows you to browse the ROV network as if you were in there.\nIt is useful for accessing and configuring routers and other local devices that may not be reachable from the GCS computer.",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/Blueos-Proxy-Extension",
                "tag": "v1.0.0",
                "type": "example",
                "website": "https://github.com/Williangalvani/Blueos-Proxy-Extension"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "7a4a7012-1030-5396-a25f-f9feb4bee516",
                "images": [
                    {
                        "digest": "sha256:403797eeef9396e67001caa71d638c64e10a8e27aad5f16838208de4c7ae5c47",
                        "expanded_size": 84582989,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {},
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/blueos-proxy/:/usr/blueos/userdata/blueos-proxy/"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# Blueos Proxy Extension\n\nThis allows you to browse the ROV network as if you were in there.\nIt is useful for accessing and configuring routers and other local devices that may not be reachable from the GCS computer.",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/Blueos-Proxy-Extension",
                "tag": "v1.0.1",
                "type": "tool",
                "website": "https://github.com/Williangalvani/Blueos-Proxy-Extension"
            },
            "v1.0.2": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "a0cacf66-8f2c-58d5-b730-1cead219d628",
                "images": [
                    {
                        "digest": "sha256:558d5fd76d64ebf386f9d3b999e735f06d5c5e5083185bb8eee43da06fb21160",
                        "expanded_size": 84749977,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {},
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/blueos-proxy/:/usr/blueos/userdata/blueos-proxy/"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# Blueos Proxy Extension\n\nThis allows you to browse the ROV network as if you were in there.\nIt is useful for accessing and configuring routers and other local devices that may not be reachable from the GCS computer.",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/Blueos-Proxy-Extension",
                "tag": "v1.0.2",
                "type": "tool",
                "website": "https://github.com/Williangalvani/Blueos-Proxy-Extension"
            },
            "v1.0.3": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "0f5fa5df-187c-52c9-91f7-59550a1f923d",
                "images": [
                    {
                        "digest": "sha256:a5f4b1f8bacfcb91b79e43880c2d4130854f8b84850450e5b3342628b7ad078a",
                        "expanded_size": 84759554,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    },
                    {
                        "digest": "sha256:4fcfb25e22e3f1f3a4327e9df9f1fbb94260b4cc576a29aef41969cbe2c71b21",
                        "expanded_size": 90239649,
                        "platform": {
                            "architecture": "arm64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {},
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/blueos-proxy/:/usr/blueos/userdata/blueos-proxy/"
                        ],
                        "NetworkMode": "host"
                    }
                },
                "readme": "# Blueos Proxy Extension\n\nThis allows you to browse the ROV network as if you were in there.\nIt is useful for accessing and configuring routers and other local devices that may not be reachable from the GCS computer.",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/Blueos-Proxy-Extension",
                "tag": "v1.0.3",
                "type": "tool",
                "website": "https://github.com/Williangalvani/Blueos-Proxy-Extension"
            }
        },
        "website": "https://github.com/Williangalvani/Blueos-Proxy-Extension"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "Exposes Oak-D streams into cockpit",
        "docker": "williangalvani/oakd-extension",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/oakd/extension_logo.png",
        "identifier": "williangalvani.oakd",
        "name": "Oak-D Video Streams",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "267435ea-f9fd-510b-b863-250a622957f2",
                "images": [
                    {
                        "digest": "sha256:feec843fadf59cfa34d94b8684354fb9cb6c150b107fd30cff87b6772c0b0295",
                        "expanded_size": 2026337533,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    },
                    {
                        "digest": "sha256:122792a81db3d0ecaff4b300237e9f1bd43da2447b0a62dd90c691ae85c7b7cc",
                        "expanded_size": 1775877643,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/dev/bus/usb:/dev/bus/usb"
                        ],
                        "DeviceCgroupRules": [
                            "c 189:* rmw"
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "This extension exposes the Stereo Depth Disparity and RGB video from Oak-D cameras into RTSP streams that can be displayed in Cockpit.",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/Oakd-extension/",
                "tag": "v1.0.0",
                "type": "example",
                "website": "https://github.com/Williangalvani/Oakd-extension/"
            }
        },
        "website": "https://github.com/Williangalvani/Oakd-extension"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/company_logo.png",
        "description": "Vuetify + Persistent backend",
        "docker": "williangalvani/blueos-example4",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/williangalvani/example4/extension_logo.png",
        "identifier": "williangalvani.example4",
        "name": "Example 4",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "f9b3fffd-adc2-5d3a-aa12-3c4bdc3220f4",
                "images": [
                    {
                        "digest": "sha256:d6515e5ff51293fd362e88bec27dd55b0451dea1bf541d263f15faa8410a0756",
                        "expanded_size": 51091856,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# Static Webpage extension\n\nThis uses python to serve a static HTML page using Vue and Vuetify as an extension. The static page in this example talks to a simple python backend.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "requirements": "core >= 1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.0",
                "type": "other",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "willian@bluerobotics.com",
                        "name": "Willian Galvani"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [],
                "identifier": "8971d6d2-1339-51d2-b015-bbf05e4f3df9",
                "images": [
                    {
                        "digest": "sha256:bec0e1bddc646ba1c477fd5767b29302aaff8d38057287949eac54d4815c7c3e",
                        "expanded_size": 53713690,
                        "platform": {
                            "architecture": "amd64",
                            "os": "linux",
                            "variant": null
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config:/root/.config"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# Static Webpage extension\n\nThis uses python to serve a static HTML page using Vue and Vuetify as an extension. The static page in this example talks to a simple python backend.\n\nto build:\n\nEnable qemu static support with a docker\n\n```\ndocker buildx create --name multiarch --driver docker-container --use\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n```\n\nThen build it:\n\n`docker buildx build --platform linux/amd64,linux/arm/v7 . -t YOURDOCKERHUBUSER/YOURDOCKERHUBREPO:latest --output type=registry\n`",
                "requirements": "core >= 1.1",
                "support": "https://github.com/Williangalvani/BlueOS-examples/",
                "tag": "v1.0.1",
                "type": "example",
                "website": "https://github.com/Williangalvani/BlueOS-examples/"
            }
        },
        "website": "https://github.com/Williangalvani/BlueOS-examples/"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/vshie/company_logo.png",
        "description": "Simple Ping2 Survey",
        "docker": "vshie/blueos-simplepingsurvey",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/vshie/pingSurvey/extension_logo.png",
        "identifier": "vshie.pingSurvey",
        "name": "Simple Ping2 Survey",
        "versions": {
            "v1.0.0": {
                "authors": [
                    {
                        "email": "tonywhite@bluerobotics.com",
                        "name": "Tony White"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {
                    "source": "https://github.com/vshie/pingSurvey"
                },
                "filter_tags": [],
                "identifier": "276e7852-159a-54f2-a476-0b623801fb8b",
                "images": [
                    {
                        "digest": "sha256:f329aae26ef680843dd8b54ccb72f3e35ec80102b3d850a2c87ce4c522740a62",
                        "expanded_size": 54320169,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "5420/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/root/.config/blueos/extensions/$IMAGE_NAME:/root/.config"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "5420/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# BlueOS-ping Survey\n# A simple extension for BlueOS intended for collection of time-sync'd sonar and GPS data. \n\n# Future feature ideas: \n",
                "requirements": "core >= 1.1",
                "support": null,
                "tag": "v1.0.0",
                "type": "example",
                "website": null
            },
            "v1.0.1": {
                "authors": [
                    {
                        "email": "tonywhite@bluerobotics.com",
                        "name": "Tony White"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {
                    "source": "https://github.com/vshie/pingSurvey"
                },
                "filter_tags": [],
                "identifier": "91e2c1c5-9f3e-53aa-85a5-350c42bbe7f0",
                "images": [
                    {
                        "digest": "sha256:2917a429dfc66a447295883b8de1ca551ff3e64109bd6bdcf8d943d535811ac7",
                        "expanded_size": 54415457,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "5420/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/extensions/ping-survey:/app/logs"
                        ],
                        "ExtraHosts": [
                            "host.docker.internal:host-gateway"
                        ],
                        "PortBindings": {
                            "5420/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# BlueOS-ping Survey\n# A simple extension for BlueOS intended for collection of time-sync'd sonar and GPS data. \nRead more about this extension [here](https://discuss.bluerobotics.com/t/alpha-release-simple-ping2-survey-extension/15794)\n# Future feature ideas: \n - Fix bar at top that scrolls down to hide\n - WP Survey speed parameter control on page?\n - User controlled confidence filter on live and/or logged data?\n - Show GPS speed over ground in table, HDOP\n - User configurable color gradient to depth mapping\n - Better mobile experience - scaling corner logos\n",
                "requirements": "core >= 1.1",
                "support": null,
                "tag": "v1.0.1",
                "type": "tool",
                "website": null
            }
        },
        "website": "https://github.com/vshie/pingSurvey"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/company_logo.png",
        "description": "Code in Python directly in BlueOS",
        "docker": "patrickelectric/blueos-jupyter",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/jupyter/extension_logo.png",
        "identifier": "patrickelectric.jupyter",
        "name": "Jupyter",
        "versions": {
            "0.0.0": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    },
                    {
                        "email": "raulvtormbin@gmail.com",
                        "name": "Raul Trombin"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "python",
                    "ide",
                    "development"
                ],
                "identifier": "0ad77cd1-950b-5011-9f2c-563a37cff9b8",
                "images": [
                    {
                        "digest": "sha256:80fbf5feb15c6e9f08544727addaabdd28968cec1ea44ef70553026ed49b09d1",
                        "expanded_size": 471140182,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/jupyter/root:/root:rw",
                            "/dev:/dev:rw"
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# blueos-jupyter\n\nExtension to start coding with python examples and create projects.\n\nTo install your own libraries, use: `pip install --user`.\n\nHome directory (`/root/`) will be persistent besides pip local holder for user libraries.\n\nLibraries installed:\n- bluerobotics-ping\n- bluerobotics-navigator\n- plotly\n- pymavlink\n",
                "requirements": null,
                "support": null,
                "tag": "0.0.0",
                "type": "other",
                "website": null
            },
            "0.1.0": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    },
                    {
                        "email": "raulvtrombin@gmail.com",
                        "name": "Raul Victor Trombin"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "python",
                    "ide",
                    "development"
                ],
                "identifier": "a420e07c-4c48-5d5b-a3af-c359f4a93a24",
                "images": [
                    {
                        "digest": "sha256:7fbecadd64e1b484f67a6cafda92c3f4b9630e277d83a4288196ebbf01af336f",
                        "expanded_size": 946708030,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/extensions/jupyter/root:/root:rw",
                            "/dev:/dev:rw"
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# blueos-jupyter\n\nExtension to start coding with python examples and create projects.\n\nTo install your own libraries, use: `pip install --user`.\n\nHome directory (`/root/`) will be persistent besides pip local holder for user libraries.\n\nLibraries installed:\n- bluerobotics-ping\n- bluerobotics-navigator\n- plotly\n- pymavlink\n",
                "requirements": null,
                "support": null,
                "tag": "0.1.0",
                "type": "other",
                "website": null
            }
        },
        "website": "https://github.com/patrickelectric/blueos-jupyter"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/company_logo.png",
        "description": "Edit and run code directly in BlueOS",
        "docker": "patrickelectric/blueos-openvscode",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/openvscode/extension_logo.png",
        "identifier": "patrickelectric.openvscode",
        "name": "OpenVSCoder",
        "versions": {
            "1.0.0": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "c7b1984e-6336-5204-b7e3-9b2c61daa067",
                "images": [
                    {
                        "digest": "sha256:fafa0fa8ef1e93fc13f8db0da55157fc95303a4b5c2bccd00cf670aaae8b5d3e",
                        "expanded_size": 211619813,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        }
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.0.0",
                "type": "other",
                "website": null
            },
            "1.0.1": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "afb9fde5-0177-5c09-b3f4-99121be818a9",
                "images": [
                    {
                        "digest": "sha256:dee5ee2a9c888be36172b674b9284a9434147874af39ca6680c017de0dfa8610",
                        "expanded_size": 211619828,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.0.1",
                "type": "other",
                "website": null
            },
            "1.0.2": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "76805245-74f0-5259-b288-86b22e5b46cf",
                "images": [
                    {
                        "digest": "sha256:933474f7fb3e1223b29b1fd6c1b382d8ca40635e2513d322fed6d052f2c2a8f1",
                        "expanded_size": 211619835,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.0.2",
                "type": "other",
                "website": null
            },
            "1.0.3": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "d1300938-da1c-5069-9afa-ffe3f5187eb0",
                "images": [
                    {
                        "digest": "sha256:5647c270f0f05c688748e58912aa139e1d82b8801ccf23b4997631e13f89abe9",
                        "expanded_size": 211619864,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.0.3",
                "type": "other",
                "website": null
            },
            "1.0.4": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "fb045e44-05da-513c-bb57-102a345fbe29",
                "images": [
                    {
                        "digest": "sha256:de3c0417bb5f8ff88cefc38e78d8706116d8ae9726c2ab4262af5a7580e7567c",
                        "expanded_size": 306514789,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.0.4",
                "type": "other",
                "website": null
            },
            "1.0.5": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "c989ddf7-85f3-5460-b5e5-a639850d69d0",
                "images": [
                    {
                        "digest": "sha256:fca3d0af07145c5a4b15ed014f9e7db84d2f358b4d22716cf0fda8d31cbc479b",
                        "expanded_size": 306628410,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/etc/hostname:/etc/hostname:ro",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.0.5",
                "type": "other",
                "website": null
            },
            "1.0.6": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "5a5162c2-633a-5578-9e92-f88f52f30baf",
                "images": [
                    {
                        "digest": "sha256:a917f9dc8ea4b6c8c55d2d740d28e034ee0e83e46422a8bb6a40e9fe8b8b5af6",
                        "expanded_size": 306628413,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/etc/hostname:/etc/hostname:ro",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.0.6",
                "type": "other",
                "website": null
            },
            "1.0.7": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "211e4d0d-d78c-5a83-9118-c2131d15d55a",
                "images": [
                    {
                        "digest": "sha256:b145ec2696af559d0df0ef81cd3428627332bcc3bab0f6a531b668a4fac63be7",
                        "expanded_size": 306628412,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/var/run/docker.sock:/var/run/docker.sock:rw",
                            "/usr/bin/docker:/usr/bin/docker:ro",
                            "/etc/hostname:/etc/hostname:ro",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.0.7",
                "type": "other",
                "website": null
            },
            "1.1.0": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "5e8030ab-ba57-5282-b306-5aae909f721d",
                "images": [
                    {
                        "digest": "sha256:c4bfff1256818710af76d7b9ca2cfff8d98f2edcacf745c2b460a5166d822ece",
                        "expanded_size": 800907473,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/var/run/docker.sock:/var/run/docker.sock:rw",
                            "/usr/bin/docker:/usr/bin/docker:ro",
                            "/etc/hostname:/etc/hostname:ro",
                            "/dev:/dev:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.1.0",
                "type": "other",
                "website": null
            },
            "1.1.1": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "74ee6c4f-b235-55df-b9f0-21834eb183e7",
                "images": [
                    {
                        "digest": "sha256:36249d2e485389d1a2cc2470160a2452236bba9684a1050f9a1a83bda032579e",
                        "expanded_size": 690118664,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata:/home/workspace/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/var/run/docker.sock:/var/run/docker.sock:rw",
                            "/usr/bin/docker:/usr/bin/docker:ro",
                            "/etc/hostname:/etc/hostname:ro",
                            "/dev:/dev:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.1.1",
                "type": "other",
                "website": null
            },
            "1.1.2": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": null,
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "vscode",
                    "python",
                    "rust"
                ],
                "identifier": "f92ef5b9-d9ff-557e-9b53-d1de05547ec0",
                "images": [
                    {
                        "digest": "sha256:6c4f9d55d5a55b557d473ad47b08493e56be4801d44744a151598505a80f2d38",
                        "expanded_size": 717989843,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/openvscode/.cache:/home/workspace/.cache:rw",
                            "/usr/blueos/userdata/openvscode/.local:/home/workspace/.local:rw",
                            "/usr/blueos/userdata:/userdata:rw",
                            "/usr/blueos/openvscode:/openvscode:rw",
                            "/var/run/docker.sock:/var/run/docker.sock:rw",
                            "/usr/bin/docker:/usr/bin/docker:ro",
                            "/etc/hostname:/etc/hostname:ro",
                            "/dev:/dev:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS Code Server\n\nBlueOS extension for OpenVSCode Server.\n\nOpenVSCode server is a project where it provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. It's based on the very same architecture used by Gitpod or GitHub Codespaces at scale.",
                "requirements": null,
                "support": null,
                "tag": "1.1.2",
                "type": "other",
                "website": null
            }
        },
        "website": "https://github.com/patrickelectric/blueos-code-server"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/company_logo.png",
        "description": "Low-code development tool for custom functionality",
        "docker": "patrickelectric/blueos-node-red",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/node-red/extension_logo.png",
        "identifier": "patrickelectric.node-red",
        "name": "Node-RED",
        "versions": {
            "1.0.0": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "node-red"
                ],
                "identifier": "088c740e-e11f-5ba9-9f60-a9b4a4c3f93b",
                "images": [
                    {
                        "digest": "sha256:7e898a24b188429bad6bb6d1229ae906a1447b732afbc69fe29b22a5b839af89",
                        "expanded_size": 161234072,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/node-red:/data:rw",
                            "/etc/hostname:/etc/hostname:ro",
                            "/dev:/dev:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS node-red\n\nNode-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.\n\nIt provides a browser-based editor that makes it easy to wire together flows using the wide range of nodes in the palette that can be deployed to its runtime in a single-click.",
                "requirements": null,
                "support": null,
                "tag": "1.0.0",
                "type": "other",
                "website": null
            },
            "1.0.1": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "node-red"
                ],
                "identifier": "8dda3c26-b403-5548-8d75-b95100108b4b",
                "images": [
                    {
                        "digest": "sha256:7e898a24b188429bad6bb6d1229ae906a1447b732afbc69fe29b22a5b839af89",
                        "expanded_size": 161234072,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/node-red:/data:rw",
                            "/etc/hostname:/etc/hostname:ro",
                            "/dev:/dev:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS node-red\n\nNode-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.\n\nIt provides a browser-based editor that makes it easy to wire together flows using the wide range of nodes in the palette that can be deployed to its runtime in a single-click.",
                "requirements": null,
                "support": null,
                "tag": "1.0.1",
                "type": "other",
                "website": null
            },
            "1.0.2": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "node-red"
                ],
                "identifier": "b602a2c3-c621-51ed-a7bc-9a448c89206d",
                "images": [
                    {
                        "digest": "sha256:20ce89d066804fc5c0207b71e7de85488abd1caccb011c21ee5a66d4df7f3130",
                        "expanded_size": 157814612,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/userdata/node-red:/data:rw",
                            "/etc/hostname:/etc/hostname:ro",
                            "/dev:/dev:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS node-red\n\nNode-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.\n\nIt provides a browser-based editor that makes it easy to wire together flows using the wide range of nodes in the palette that can be deployed to its runtime in a single-click.",
                "requirements": null,
                "support": null,
                "tag": "1.0.2",
                "type": "other",
                "website": null
            },
            "1.0.3": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "node-red"
                ],
                "identifier": "54827c34-d8ad-51a3-987b-138daee5e1fc",
                "images": [
                    {
                        "digest": "sha256:40af90b41e49214ab3cd2551871caae204e2d2bb484cf647c4b8b5db15936e1c",
                        "expanded_size": 161203610,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/extensions/node-red:/data:rw",
                            "/etc/hostname:/etc/hostname:ro",
                            "/dev:/dev:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS node-red\n\nNode-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.\n\nIt provides a browser-based editor that makes it easy to wire together flows using the wide range of nodes in the palette that can be deployed to its runtime in a single-click.",
                "requirements": null,
                "support": null,
                "tag": "1.0.3",
                "type": "other",
                "website": null
            },
            "1.1.0": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "code",
                    "development",
                    "ide",
                    "node-red"
                ],
                "identifier": "ae38474b-b646-5aaf-907a-3bb8870400cc",
                "images": [
                    {
                        "digest": "sha256:3c60af81b15b762638e9de6b66252522513788274ba947a2fa73449022ed764b",
                        "expanded_size": 168829981,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "80/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/usr/blueos/extensions/node-red:/data:rw",
                            "/etc/hostname:/etc/hostname:ro",
                            "/dev:/dev:rw",
                            "/:/home/workspace/host:rw"
                        ],
                        "PortBindings": {
                            "80/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS node-red\n\nNode-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.\n\nIt provides a browser-based editor that makes it easy to wire together flows using the wide range of nodes in the palette that can be deployed to its runtime in a single-click.",
                "requirements": null,
                "support": null,
                "tag": "1.1.0",
                "type": "other",
                "website": null
            }
        },
        "website": "https://github.com/patrickelectric/blueos-node-red"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/company_logo.png",
        "description": "Easy to use container management utility",
        "docker": "patrickelectric/blueos-yacht",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/yacht/extension_logo.png",
        "identifier": "patrickelectric.yacht",
        "name": "Yacht",
        "versions": {
            "1.0.0": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "docker",
                    "container",
                    "dashboard",
                    "manager"
                ],
                "identifier": "4310fd94-9a40-56dd-95b5-1c8ba23cb0ea",
                "images": [
                    {
                        "digest": "sha256:3cbb5d3ccef873e9d2c2f2887d1e833ab1cf74a37dbce0127eecdd93332d33cd",
                        "expanded_size": 75237108,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "ExposedPorts": {
                        "8000/tcp": {}
                    },
                    "HostConfig": {
                        "Binds": [
                            "/var/run/docker.sock:/var/run/docker.sock:rw"
                        ],
                        "PortBindings": {
                            "8000/tcp": [
                                {
                                    "HostPort": ""
                                }
                            ]
                        },
                        "Privileged": true
                    }
                },
                "readme": "# BlueOS yacht\n\nYacht is a container management UI with a focus on templates and 1-click deployments.",
                "requirements": null,
                "support": null,
                "tag": "1.0.0",
                "type": "tool",
                "website": null
            }
        },
        "website": "https://github.com/patrickelectric/blueos-yacht"
    },
    {
        "company_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/company_logo.png",
        "description": "Robot Operating System (ROS) extension for BlueOS",
        "docker": "patrickelectric/blueos-ros",
        "extension_logo": "https://raw.githubusercontent.com/bluerobotics/BlueOS-Extensions-Repository/master/repos/patrickelectric/ros/extension_logo.png",
        "identifier": "patrickelectric.ros",
        "name": "ROS",
        "versions": {
            "0.0.1": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "ros",
                    "robot"
                ],
                "identifier": "f96c26c2-5c7b-5d91-adce-2c30cf1b0fc0",
                "images": [
                    {
                        "digest": "sha256:9b159ab65e4d0b1d541460865aab4cabf9173de7163221d229522cb47a4ae381",
                        "expanded_size": 369666474,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/dev:/dev:rw"
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS ROS extension\r\n\r\nThis extension makes possible to communicate with the vehicle via ROS\r\n\r\nTo connect, you just need to run the following commands:\r\n```sh\r\nexport ROS_MASTER_URI=http://blueos.local:11311\r\n# or export ROS_MASTER_URI=http://<vehicle-ip>:11311\r\nrostopic list # Done, you already have access to it!\r\n```\r\n\r\nYou can also access the data via [roslibjs]([url](http://wiki.ros.org/roslibjs)http://wiki.ros.org/roslibjs).\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n\r\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/roslibjs/1.1.0/roslib.min.js\"></script>\r\n\r\n<script type=\"text/javascript\" type=\"text/javascript\">\r\n  var ros = new ROSLIB.Ros({\r\n    url : 'ws://blueos.local:8889' // Change if necessary for your vehicle ip\r\n  });\r\n\r\n  ros.on('connection', function() {\r\n    document.getElementById(\"status\").innerHTML = \"Connected\";\r\n  });\r\n\r\n  ros.on('error', function(error) {\r\n    document.getElementById(\"status\").innerHTML = \"Error\";\r\n  });\r\n\r\n  ros.on('close', function() {\r\n    document.getElementById(\"status\").innerHTML = \"Closed\";\r\n  });\r\n\r\n  var txt_listener = new ROSLIB.Topic({\r\n    ros : ros,\r\n    name : '/mavros/vfr_hud',\r\n    messageType : 'mavros_msgs/VFR_HUD'\r\n  });\r\n\r\n  txt_listener.subscribe(function(m) {\r\n    document.getElementById(\"msg\").innerHTML = JSON.stringify(m);\r\n  });\r\n</script>\r\n</head>\r\n\r\n<body>\r\n  <h1>Simple ROS User Interface</h1>\r\n  <p>Connection status: <span id=\"status\"></span></p>\r\n  <p>Last /mavros/vfr_hud received: <span id=\"msg\"></span></p>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Use a different ROS master origin\r\n\r\nIt's possible to change ROS master for the extension using BlueOS on pirate mode and configuring ROS environments variables under the extension configuration menu.\r\n\r\nA valid configurtion wouyld look like this:\r\n\r\n```json5\r\n{\r\n  \"NetworkMode\": \"host\",\r\n  \"HostConfig\": {\r\n  \"Binds\": [\r\n    \"/dev:/dev:rw\"\r\n  ],\r\n    \"Privileged\": true,\r\n    \"NetworkMode\": \"host\"\r\n  },\r\n  \"Env\": [\r\n    \"ROS_HOSTNAME=192.168.2.2\",\r\n    \"ROS_MASTER_URI=http://192.168.2.3:11311\",\r\n    \"ROS_IP=192.168.2.2\"\r\n  ]\r\n}\r\n```\r\n\r\nFor more information about it, check [BlueOS documentation](https://blueos.cloud/docs/blueos/1.1/development/extensions/).\r\n",
                "requirements": null,
                "support": null,
                "tag": "0.0.1",
                "type": "other",
                "website": null
            },
            "0.0.2": {
                "authors": [
                    {
                        "email": "patrickelectric@gmail.com",
                        "name": "Patrick Jos\u00e9 Pereira"
                    }
                ],
                "company": {
                    "about": "",
                    "email": "support@bluerobotics.com",
                    "name": "Blue Robotics"
                },
                "docs": null,
                "extra_links": {},
                "filter_tags": [
                    "ros",
                    "robot"
                ],
                "identifier": "86570bbb-6dd3-516a-9ce3-22becf234388",
                "images": [
                    {
                        "digest": "sha256:a9a2112b8cc7df5fefab629d79aa50c7cf68f6f205afe5f7fa44ed343072517a",
                        "expanded_size": 370009669,
                        "platform": {
                            "architecture": "arm",
                            "os": "linux",
                            "variant": "v7"
                        }
                    }
                ],
                "permissions": {
                    "HostConfig": {
                        "Binds": [
                            "/dev:/dev:rw"
                        ],
                        "NetworkMode": "host",
                        "Privileged": true
                    },
                    "NetworkMode": "host"
                },
                "readme": "# BlueOS ROS extension\r\n\r\nThis extension makes possible to communicate with the vehicle via ROS\r\n\r\nTo connect, you just need to run the following commands:\r\n```sh\r\nexport ROS_MASTER_URI=http://blueos.local:11311\r\n# or export ROS_MASTER_URI=http://<vehicle-ip>:11311\r\nrostopic list # Done, you already have access to it!\r\n```\r\n\r\nYou can also access the data via [roslibjs]([url](http://wiki.ros.org/roslibjs)http://wiki.ros.org/roslibjs).\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n\r\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/roslibjs/1.1.0/roslib.min.js\"></script>\r\n\r\n<script type=\"text/javascript\" type=\"text/javascript\">\r\n  var ros = new ROSLIB.Ros({\r\n    url : 'ws://blueos.local:8889' // Change if necessary for your vehicle ip\r\n  });\r\n\r\n  ros.on('connection', function() {\r\n    document.getElementById(\"status\").innerHTML = \"Connected\";\r\n  });\r\n\r\n  ros.on('error', function(error) {\r\n    document.getElementById(\"status\").innerHTML = \"Error\";\r\n  });\r\n\r\n  ros.on('close', function() {\r\n    document.getElementById(\"status\").innerHTML = \"Closed\";\r\n  });\r\n\r\n  var txt_listener = new ROSLIB.Topic({\r\n    ros : ros,\r\n    name : '/mavros/vfr_hud',\r\n    messageType : 'mavros_msgs/VFR_HUD'\r\n  });\r\n\r\n  txt_listener.subscribe(function(m) {\r\n    document.getElementById(\"msg\").innerHTML = JSON.stringify(m);\r\n  });\r\n</script>\r\n</head>\r\n\r\n<body>\r\n  <h1>Simple ROS User Interface</h1>\r\n  <p>Connection status: <span id=\"status\"></span></p>\r\n  <p>Last /mavros/vfr_hud received: <span id=\"msg\"></span></p>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Use a different ROS master origin\r\n\r\nIt's possible to change ROS master for the extension using BlueOS on pirate mode and configuring ROS environments variables under the extension configuration menu.\r\n\r\nA valid configurtion wouyld look like this:\r\n\r\n```json5\r\n{\r\n  \"NetworkMode\": \"host\",\r\n  \"HostConfig\": {\r\n  \"Binds\": [\r\n    \"/dev:/dev:rw\"\r\n  ],\r\n    \"Privileged\": true,\r\n    \"NetworkMode\": \"host\"\r\n  },\r\n  \"Env\": [\r\n    \"ROS_HOSTNAME=192.168.2.2\",\r\n    \"ROS_MASTER_URI=http://192.168.2.3:11311\",\r\n    \"ROS_IP=192.168.2.2\"\r\n  ]\r\n}\r\n```\r\n\r\nFor more information about it, check [BlueOS documentation](https://blueos.cloud/docs/blueos/1.1/development/extensions/).\r\n",
                "requirements": null,
                "support": null,
                "tag": "0.0.2",
                "type": "other",
                "website": null
            }
        },
        "website": "https://github.com/patrickelectric/blueos-ros"
    }
]